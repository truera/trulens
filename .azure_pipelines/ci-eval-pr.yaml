# This a definition for azure pipelines, not github pipelines. There are
# differences between these systems.

trigger: none

pr:
  # Run this pipeline for any PR that wishes to push to main that changes code
  # inside trulens_eval folder.
  branches:
    include:
      - main
  paths:
    include:
      - trulens_eval

jobs:
  - job: PRBranchProtect # name seems to be important but cannot figure out why
    pool:
      vmImage: ubuntu-latest
    timeoutInMinutes: 30

    strategy:
      matrix:
        default: # name is important
          python-version: 3.12
          tests-folder: tests/unit
        py308-static:
          python-version: 3.8
          tests-folder: tests/unit/static
        py309-static:
          python-version: 3.9
          tests-folder: tests/unit/static
        py310-static:
          python-version: 3.10
          tests-folder: tests/unit/static
        py311-static:
          python-version: 3.11
          tests-folder: tests/unit/static

    steps:
      - checkout: self
        clean: true

      - bash: |
          echo "##vso[task.prependpath]$CONDA/bin"

          set -e
          conda create -y --quiet \
            -n $(python-version) \
            python=$(python-version)

          conda init bash

        displayName: Setup conda

      - bash: |
          set -e
          source activate $(python-version)

          pip install -r requirements.dev.txt --verbose

          pre-commit run --all-files --show-diff-on-failure
        condition: eq(variables['python-version'], 3.12) # only run format check with latest python version
        displayName: Format diffs

      - bash: |
          set -e
          source activate $(python-version)

          cd ./trulens_eval
          pip install -e . --verbose

        displayName: Install trulens

      - bash: |
          set -e
          source activate $(python-version)

          pip install -r requirements.test.txt --verbose

        displayName: Install testing packages

      - bash: |
          set -e
          source activate $(python-version)

          python --version
          pip --version
          pip list --verbose

        displayName: Describe python env

      - bash: |
          set -e
          source activate $(python-version)

          cd ./trulens_eval
          python -m pytest --test-run-title="Required $(python-version) unit tests" $(tests-folder)

        displayName: Unit tests with required packages

      - bash: |
          set -e
          source activate $(python-version)

          cd ./trulens_eval

          # Once we start running notebooks in these tests, might have to do this again:
          # pip install ipykernel
          # python -m ipykernel install --user \
          #  --name $(python-version) \
          #  --display-name $(python-version)

          pip install --verbose -r trulens_eval/requirements.optional.txt

          python --version
          pip --version
          pip list --verbose

        displayName: Install optional packages

        # Models: Snowflake Cortex; currently only supports Python 3.8, 3.9, 3.10, and 3.11.
        # https://docs.snowflake.com/en/developer-guide/snowpark/python/setup#prerequisites
      - bash: |
          set -e
          source activate $(python-version)
          echo "Installing snowflake-snowpark-python for python $(python-version)"

          if [[ "$(echo $(python-version) | cut -d'.' -f1)" -eq "3" && "$(echo $(python-version) | cut -d'.' -f2)" -lt "12" ]]; then
              cd ./trulens_eval
              pip install --verbose "snowflake-snowpark-python>=1.18.0"
              pip list --verbose
          else
              echo "Python version is 3.12 or higher. Skipping installation."
          fi
        displayName: Install snowflake-snowpark-python for python < 3.12

      - bash: |
          set -e
          source activate $(python-version)

          cd ./trulens_eval

          python -m pytest  --test-run-title="Optional $(python-version) unit tests" $(tests-folder)
        env:
          # enables optional tests, see tests/unit/test.py
          TEST_OPTIONAL: true

          # tests make use of various APIs:
          OPENAI_API_KEY: $(OPENAI_API_KEY)
          HUGGINGFACE_API_KEY: $(HUGGINGFACE_API_KEY)
          PINECONE_API_KEY: $(PINECONE_API_KEY)
          PINECONE_ENV: $(PINECONE_ENV)
          HUGGINGFACEHUB_API_TOKEN: $(HUGGINGFACEHUB_API_TOKEN)

          # some tests log into Snowflake.
          SNOWFLAKE_ACCOUNT: $(SNOWFLAKE_ACCOUNT)
          SNOWFLAKE_USER: $(SNOWFLAKE_USER)
          SNOWFLAKE_USER_PASSWORD: $(SNOWFLAKE_USER_PASSWORD)
          SNOWFLAKE_DATABASE: $(SNOWFLAKE_DATABASE)
          SNOWFLAKE_ROLE: $(SNOWFLAKE_ROLE)
          SNOWFLAKE_WAREHOUSE: $(SNOWFLAKE_WAREHOUSE)

        displayName: Unit tests with optional packages
