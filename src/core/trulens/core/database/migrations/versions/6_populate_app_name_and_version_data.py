"""populate app name and version fields

Revision ID: 6
Revises: 5
Create Date: 2024-08-16 12:46:49.510690
"""

from alembic import op
from sqlalchemy.orm.session import Session
from trulens.core.database.orm import make_orm_for_prefix
from trulens.core.schema.app import AppDefinition

# revision identifiers, used by Alembic.
revision = "6"
down_revision = "5"
branch_labels = None
depends_on = "5"


def upgrade(config) -> None:
    prefix = config.get_main_option("trulens.table_prefix")

    if prefix is None:
        raise RuntimeError("trulens.table_prefix is not set")

    # TODO: The automatically generated code below likely references
    #       tables such as "trulens_feedback_defs" or "trulens_records".
    #       However, the common prefix for these tables "trulens_" is
    #       actually configurable and so replace it with the variable
    #       prefix.
    #       e.g. replace "trulens_records" with prefix + "records".
    # ### commands auto generated by Alembic - please adjust! ###
    session = Session(bind=op.get_bind())
    orm = make_orm_for_prefix(table_prefix=prefix)
    apps = session.query(orm.AppDefinition).all()
    for app in apps:
        app.app_version = "latest"
        app.app_id = AppDefinition._compute_app_id(
            app.app_name, app.app_version
        )
    session.commit()

    # ### end Alembic commands ###


def downgrade(config) -> None:
    prefix = config.get_main_option("trulens.table_prefix")

    if prefix is None:
        raise RuntimeError("trulens.table_prefix is not set")

    # TODO: The automatically generated code below likely references
    #       tables such as "trulens_feedback_defs" or "trulens_records".
    #       However, the common prefix for these tables "trulens_" is
    #       actually configurable and so replace it with the variable
    #       prefix.
    #       e.g. replace "trulens_records" with prefix + "records".
    # ### commands auto generated by Alembic - please adjust! ###
    session = Session(bind=op.get_bind())
    orm = make_orm_for_prefix(table_prefix=prefix)
    apps = session.query(orm.AppDefinition).all()
    for app in apps:
        app.app_version = None
        app.app_id = None
    session.commit()
    # ### end Alembic commands ###
