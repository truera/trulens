,record,event_id,record_attributes,record_type,resource_attributes,start_timestamp,timestamp,trace
0,"{'name': 'root', 'kind': 1, 'parent_span_id': '', 'status': 'STATUS_CODE_UNSET'}",2713737604452658707,"{'name': 'root', 'ai.observability.span_type': 'record_root', 'ai.observability.domain': 'module', 'ai.observability.app_name': 'Simple RAG', 'ai.observability.app_version': 'v1', 'ai.observability.record_id': 'c4ea2874-9f60-4078-8819-edcd0dbf2fd0', 'ai.observability.run_name': 'test run', 'ai.observability.input_id': '42', 'ai.observability.record_root.app_name': 'Simple RAG', 'ai.observability.record_root.app_version': 'v1', 'ai.observability.record_root.record_id': 'c4ea2874-9f60-4078-8819-edcd0dbf2fd0'}",EventRecordType.SPAN,"{'telemetry.sdk.language': 'python', 'telemetry.sdk.name': 'opentelemetry', 'telemetry.sdk.version': '1.28.2', 'service.name': 'trulens'}",2025-01-31 23:38:57.633799,2025-01-31 23:38:57.639833,"{'trace_id': '252496542679367017208368062231198061843', 'parent_id': '', 'span_id': '2713737604452658707'}"
1,"{'name': 'langchain_core.runnables.base.RunnableSequence.invoke', 'kind': 1, 'parent_span_id': '2713737604452658707', 'status': 'STATUS_CODE_UNSET'}",12617144269860690225,"{'name': 'langchain_core.runnables.base.RunnableSequence.invoke', 'ai.observability.span_type': 'main', 'ai.observability.domain': 'module', 'ai.observability.app_name': 'Simple RAG', 'ai.observability.app_version': 'v1', 'ai.observability.record_id': 'c4ea2874-9f60-4078-8819-edcd0dbf2fd0', 'ai.observability.run_name': 'test run', 'ai.observability.input_id': '42', 'ai.observability.call.return': 'This is a mocked response for prompt 0.', 'ai.observability.call.stack': '  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/bin/pytest"", line 8, in <module>\n    sys.exit(console_main())\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/config/__init__.py"", line 201, in console_main\n    code = main()\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/config/__init__.py"", line 175, in main\n    ret: ExitCode | int = config.hook.pytest_cmdline_main(config=config)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_hooks.py"", line 513, in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_manager.py"", line 120, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_callers.py"", line 103, in _multicall\n    res = hook_impl.function(*args)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/main.py"", line 330, in pytest_cmdline_main\n    return wrap_session(config, _main)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/main.py"", line 283, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/main.py"", line 337, in _main\n    config.hook.pytest_runtestloop(session=session)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_hooks.py"", line 513, in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_manager.py"", line 120, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_callers.py"", line 103, in _multicall\n    res = hook_impl.function(*args)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/main.py"", line 362, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_hooks.py"", line 513, in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_manager.py"", line 120, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_callers.py"", line 103, in _multicall\n    res = hook_impl.function(*args)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/runner.py"", line 113, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/runner.py"", line 132, in runtestprotocol\n    reports.append(call_and_report(item, ""call"", log))\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/runner.py"", line 241, in call_and_report\n    call = CallInfo.from_call(\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/runner.py"", line 341, in from_call\n    result: TResult | None = func()\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/runner.py"", line 242, in <lambda>\n    lambda: runtest_hook(item=item, **kwds), when=when, reraise=reraise\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_hooks.py"", line 513, in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_manager.py"", line 120, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_callers.py"", line 103, in _multicall\n    res = hook_impl.function(*args)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/runner.py"", line 174, in pytest_runtest_call\n    item.runtest()\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/unittest.py"", line 351, in runtest\n    testcase(result=self)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/unittest/case.py"", line 678, in __call__\n    return self.run(*args, **kwds)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/unittest/case.py"", line 623, in run\n    self._callTestMethod(testMethod)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/unittest/case.py"", line 579, in _callTestMethod\n    if method() is not None:\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/tests/unit/test_otel_tru_chain.py"", line 75, in test_smoke\n    rag_chain.invoke(""What is multi-headed attention?"")\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 178, in sync_wrapper\n    next(ret)\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 212, in convert_to_generator\n    _set_span_attributes(\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 109, in _set_span_attributes\n    set_function_call_attributes(span, ret, func_exception, all_kwargs)\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/experimental/otel_tracing/core/span.py"", line 152, in set_function_call_attributes\n    span, SpanAttributes.CALL.STACK, ""\\n"".join(traceback.format_stack())\n', 'ai.observability.call.kwargs.input': 'What is multi-headed attention?', 'ai.observability.main.main_input': 'What is multi-headed attention?', 'ai.observability.main.main_output': 'This is a mocked response for prompt 0.'}",EventRecordType.SPAN,"{'telemetry.sdk.language': 'python', 'telemetry.sdk.name': 'opentelemetry', 'telemetry.sdk.version': '1.28.2', 'service.name': 'trulens'}",2025-01-31 23:38:57.633850,2025-01-31 23:38:57.639821,"{'trace_id': '252496542679367017208368062231198061843', 'parent_id': '2713737604452658707', 'span_id': '12617144269860690225'}"
2,"{'name': 'langchain_core.runnables.base.RunnableParallel.invoke', 'kind': 1, 'parent_span_id': '12617144269860690225', 'status': 'STATUS_CODE_UNSET'}",6123394000859126479,"{'name': 'langchain_core.runnables.base.RunnableParallel.invoke', 'ai.observability.span_type': 'unknown', 'ai.observability.domain': 'module', 'ai.observability.app_name': 'Simple RAG', 'ai.observability.app_version': 'v1', 'ai.observability.record_id': 'c4ea2874-9f60-4078-8819-edcd0dbf2fd0', 'ai.observability.run_name': 'test run', 'ai.observability.input_id': '42', 'ai.observability.call.return': '{\'question\': \'What is multi-headed attention?\', \'context\': \'Table 4: The Transformer generalizes well to English constituency parsing (Results are on Section 23\\nof WSJ)\\nParser Training WSJ 23 F1\\nVinyals & Kaiser el al. (2014) [37] WSJ only, discriminative 88.3\\nPetrov et al. (2006) [29] WSJ only, discriminative 90.4\\nZhu et al. (2013) [40] WSJ only, discriminative 90.4\\nDyer et al. (2016) [8] WSJ only, discriminative 91.7\\nTransformer (4 layers) WSJ only, discriminative 91.3\\nZhu et al. (2013) [40] semi-supervised 91.3\\nHuang & Harper (2009) [14] semi-supervised 91.3\\nMcClosky et al. (2006) [26] semi-supervised 92.1\\nVinyals & Kaiser el al. (2014) [37] semi-supervised 92.1\\nTransformer (4 layers) semi-supervised 92.7\\nLuong et al. (2015) [23] multi-task 93.0\\nDyer et al. (2016) [8] generative 93.3\\nincreased the maximum output length to input length + 300. We used a beam size of 21 and Î± = 0.3\\nfor both WSJ only and the semi-supervised setting.\\nOur results in Table 4 show that despite the lack of task-specific tuning our model performs sur-\\nprisingly well, yielding better results than all previously reported models with the exception of the\\nRecurrent Neural Network Grammar [8].\\nIn contrast to RNN sequence-to-sequence models [37], the Transformer outperforms the Berkeley-\\nParser [29] even when training only on the WSJ training set of 40K sentences.\\n7 Conclusion\\nIn this work, we presented the Transformer, the first sequence transduction model based entirely on\\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\\nmulti-headed self-attention.\\nFor translation tasks, the Transformer can be trained significantly faster than architectures based\\non recurrent or convolutional layers. On both WMT 2014 English-to-German and WMT 2014\\nEnglish-to-French translation tasks, we achieve a new state of the art. In the former task our best\\nmodel outperforms even all previously reported ensembles.\\nWe are excited about the future of attention-based models and plan to apply them to other tasks. We\\nplan to extend the Transformer to problems involving input and output modalities other than text and\\nto investigate local, restricted attention mechanisms to efficiently handle large inputs and outputs\\nsuch as images, audio and video. Making generation less sequential is another research goals of ours.\\nThe code we used to train and evaluate our models is available at https://github.com/\\ntensorflow/tensor2tensor.\\nAcknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\\ncomments, corrections and inspiration.\\nReferences\\n[1] Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. Layer normalization. arXiv preprint\\narXiv:1607.06450, 2016.\\n[2] Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. Neural machine translation by jointly\\nlearning to align and translate. CoRR, abs/1409.0473, 2014.\\n[3] Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V . Le. Massive exploration of neural\\nmachine translation architectures. CoRR, abs/1703.03906, 2017.\\n[4] Jianpeng Cheng, Li Dong, and Mirella Lapata. Long short-term memory-networks for machine\\nreading. arXiv preprint arXiv:1601.06733, 2016.\\n10\\n\\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\\nModel\\nBLEU Training Cost (FLOPs)\\nEN-DE EN-FR EN-DE EN-FR\\nByteNet [18] 23.75\\nDeep-Att + PosUnk [39] 39.2 1.0 Â· 1020\\nGNMT + RL [38] 24.6 39.92 2.3 Â· 1019 1.4 Â· 1020\\nConvS2S [9] 25.16 40.46 9.6 Â· 1018 1.5 Â· 1020\\nMoE [32] 26.03 40.56 2.0 Â· 1019 1.2 Â· 1020\\nDeep-Att + PosUnk Ensemble [39] 40.4 8.0 Â· 1020\\nGNMT + RL Ensemble [38] 26.30 41.16 1.8 Â· 1020 1.1 Â· 1021\\nConvS2S Ensemble [9] 26.36 41.29 7.7 Â· 1019 1.2 Â· 1021\\nTransformer (base model) 27.3 38.1 3.3 Â· 1018\\nTransformer (big) 28.4 41.8 2.3 Â· 1019\\nResidual Dropout We apply dropout [33] to the output of each sub-layer, before it is added to the\\nsub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the\\npositional encodings in both the encoder and decoder stacks. For the base model, we use a rate of\\nPdrop = 0.1.\\nLabel Smoothing During training, we employed label smoothing of value Ïµls = 0.1 [36]. This\\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\\n6 Results\\n6.1 Machine Translation\\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\\nBLEU, establishing a new state-of-the-art BLEU score of 28.4. The configuration of this model is\\nlisted in the bottom line of Table 3. Training took 3.5 days on 8 P100 GPUs. Even our base model\\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\\nthe competitive models.\\nOn the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\\noutperforming all of the previously published single models, at less than 1/4 the training cost of the\\nprevious state-of-the-art model. The Transformer (big) model trained for English-to-French used\\ndropout rate Pdrop = 0.1, instead of 0.3.\\nFor the base models, we used a single model obtained by averaging the last 5 checkpoints, which\\nwere written at 10-minute intervals. For the big models, we averaged the last 20 checkpoints. We\\nused beam search with a beam size of 4 and length penalty Î± = 0.6 [38]. These hyperparameters\\nwere chosen after experimentation on the development set. We set the maximum output length during\\ninference to input length + 50, but terminate early when possible [38].\\nTable 2 summarizes our results and compares our translation quality and training costs to other model\\narchitectures from the literature. We estimate the number of floating point operations used to train a\\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\\nsingle-precision floating-point capacity of each GPU 5.\\n6.2 Model Variations\\nTo evaluate the importance of different components of the Transformer, we varied our base model\\nin different ways, measuring the change in performance on English-to-German translation on the\\n5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\\n8\\n\\noutput values. These are concatenated and once again projected, resulting in the final values, as\\ndepicted in Figure 2.\\nMulti-head attention allows the model to jointly attend to information from different representation\\nsubspaces at different positions. With a single attention head, averaging inhibits this.\\nMultiHead(Q, K, V) = Concat(head1, ...,headh)WO\\nwhere headi = Attention(QWQ\\ni , KWK\\ni , V WV\\ni )\\nWhere the projections are parameter matricesWQ\\ni â RdmodelÃdk , WK\\ni â RdmodelÃdk , WV\\ni â RdmodelÃdv\\nand WO â RhdvÃdmodel .\\nIn this work we employ h = 8 parallel attention layers, or heads. For each of these we use\\ndk = dv = dmodel/h = 64. Due to the reduced dimension of each head, the total computational cost\\nis similar to that of single-head attention with full dimensionality.\\n3.2.3 Applications of Attention in our Model\\nThe Transformer uses multi-head attention in three different ways:\\nâ¢ In ""encoder-decoder attention"" layers, the queries come from the previous decoder layer,\\nand the memory keys and values come from the output of the encoder. This allows every\\nposition in the decoder to attend over all positions in the input sequence. This mimics the\\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\\n[38, 2, 9].\\nâ¢ The encoder contains self-attention layers. In a self-attention layer all of the keys, values\\nand queries come from the same place, in this case, the output of the previous layer in the\\nencoder. Each position in the encoder can attend to all positions in the previous layer of the\\nencoder.\\nâ¢ Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\\nall positions in the decoder up to and including that position. We need to prevent leftward\\ninformation flow in the decoder to preserve the auto-regressive property. We implement this\\ninside of scaled dot-product attention by masking out (setting to ââ) all values in the input\\nof the softmax which correspond to illegal connections. See Figure 2.\\n3.3 Position-wise Feed-Forward Networks\\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\\nconnected feed-forward network, which is applied to each position separately and identically. This\\nconsists of two linear transformations with a ReLU activation in between.\\nFFN(x) = max(0, xW1 + b1)W2 + b2 (2)\\nWhile the linear transformations are the same across different positions, they use different parameters\\nfrom layer to layer. Another way of describing this is as two convolutions with kernel size 1.\\nThe dimensionality of input and output is dmodel = 512, and the inner-layer has dimensionality\\ndff = 2048.\\n3.4 Embeddings and Softmax\\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\\ntokens and output tokens to vectors of dimension dmodel. We also use the usual learned linear transfor-\\nmation and softmax function to convert the decoder output to predicted next-token probabilities. In\\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\\nlinear transformation, similar to [30]. In the embedding layers, we multiply those weights by âdmodel.\\n5\\n\\nFigure 1: The Transformer - model architecture.\\nThe Transformer follows this overall architecture using stacked self-attention and point-wise, fully\\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\\nrespectively.\\n3.1 Encoder and Decoder Stacks\\nEncoder: The encoder is composed of a stack of N = 6 identical layers. Each layer has two\\nsub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, position-\\nwise fully connected feed-forward network. We employ a residual connection [11] around each of\\nthe two sub-layers, followed by layer normalization [ 1]. That is, the output of each sub-layer is\\nLayerNorm(x + Sublayer(x)), where Sublayer(x) is the function implemented by the sub-layer\\nitself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding\\nlayers, produce outputs of dimension dmodel = 512.\\nDecoder: The decoder is also composed of a stack of N = 6identical layers. In addition to the two\\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\\nattention over the output of the encoder stack. Similar to the encoder, we employ residual connections\\naround each of the sub-layers, followed by layer normalization. We also modify the self-attention\\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions. This\\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\\npredictions for position i can depend only on the known outputs at positions less than i.\\n3.2 Attention\\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\\nwhere the query, keys, values, and output are all vectors. The output is computed as a weighted sum\\n3\'}', 'ai.observability.call.stack': '  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/bin/pytest"", line 8, in <module>\n    sys.exit(console_main())\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/config/__init__.py"", line 201, in console_main\n    code = main()\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/config/__init__.py"", line 175, in main\n    ret: ExitCode | int = config.hook.pytest_cmdline_main(config=config)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_hooks.py"", line 513, in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_manager.py"", line 120, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_callers.py"", line 103, in _multicall\n    res = hook_impl.function(*args)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/main.py"", line 330, in pytest_cmdline_main\n    return wrap_session(config, _main)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/main.py"", line 283, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/main.py"", line 337, in _main\n    config.hook.pytest_runtestloop(session=session)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_hooks.py"", line 513, in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_manager.py"", line 120, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_callers.py"", line 103, in _multicall\n    res = hook_impl.function(*args)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/main.py"", line 362, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_hooks.py"", line 513, in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_manager.py"", line 120, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_callers.py"", line 103, in _multicall\n    res = hook_impl.function(*args)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/runner.py"", line 113, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/runner.py"", line 132, in runtestprotocol\n    reports.append(call_and_report(item, ""call"", log))\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/runner.py"", line 241, in call_and_report\n    call = CallInfo.from_call(\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/runner.py"", line 341, in from_call\n    result: TResult | None = func()\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/runner.py"", line 242, in <lambda>\n    lambda: runtest_hook(item=item, **kwds), when=when, reraise=reraise\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_hooks.py"", line 513, in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_manager.py"", line 120, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_callers.py"", line 103, in _multicall\n    res = hook_impl.function(*args)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/runner.py"", line 174, in pytest_runtest_call\n    item.runtest()\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/unittest.py"", line 351, in runtest\n    testcase(result=self)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/unittest/case.py"", line 678, in __call__\n    return self.run(*args, **kwds)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/unittest/case.py"", line 623, in run\n    self._callTestMethod(testMethod)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/unittest/case.py"", line 579, in _callTestMethod\n    if method() is not None:\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/tests/unit/test_otel_tru_chain.py"", line 75, in test_smoke\n    rag_chain.invoke(""What is multi-headed attention?"")\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 173, in sync_wrapper\n    if next(ret) == ""is_not_generator"":\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 193, in convert_to_generator\n    result = func(*args, **kwargs)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/langchain_core/runnables/base.py"", line 2877, in invoke\n    input = context.run(step.invoke, input, config, **kwargs)\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 178, in sync_wrapper\n    next(ret)\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 212, in convert_to_generator\n    _set_span_attributes(\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 109, in _set_span_attributes\n    set_function_call_attributes(span, ret, func_exception, all_kwargs)\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/experimental/otel_tracing/core/span.py"", line 152, in set_function_call_attributes\n    span, SpanAttributes.CALL.STACK, ""\\n"".join(traceback.format_stack())\n', 'ai.observability.call.kwargs.input': 'What is multi-headed attention?', 'ai.observability.call.kwargs.config': ""{'tags': [], 'metadata': {}, 'callbacks': <langchain_core.callbacks.manager.CallbackManager object at 0x36a53bb90>, 'recursion_limit': 25, 'configurable': {}}""}",EventRecordType.SPAN,"{'telemetry.sdk.language': 'python', 'telemetry.sdk.name': 'opentelemetry', 'telemetry.sdk.version': '1.28.2', 'service.name': 'trulens'}",2025-01-31 23:38:57.634178,2025-01-31 23:38:57.638256,"{'trace_id': '252496542679367017208368062231198061843', 'parent_id': '12617144269860690225', 'span_id': '6123394000859126479'}"
3,"{'name': 'langchain_core.runnables.passthrough.RunnablePassthrough.invoke', 'kind': 1, 'parent_span_id': '6123394000859126479', 'status': 'STATUS_CODE_UNSET'}",12513441295861183071,"{'name': 'langchain_core.runnables.passthrough.RunnablePassthrough.invoke', 'ai.observability.span_type': 'unknown', 'ai.observability.domain': 'module', 'ai.observability.app_name': 'Simple RAG', 'ai.observability.app_version': 'v1', 'ai.observability.record_id': 'c4ea2874-9f60-4078-8819-edcd0dbf2fd0', 'ai.observability.run_name': 'test run', 'ai.observability.input_id': '42', 'ai.observability.call.return': 'What is multi-headed attention?', 'ai.observability.call.stack': '  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/threading.py"", line 1002, in _bootstrap\n    self._bootstrap_inner()\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/threading.py"", line 1045, in _bootstrap_inner\n    self.run()\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/threading.py"", line 982, in run\n    self._target(*self._args, **self._kwargs)\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/utils/python.py"", line 625, in _future_target_wrapper\n    return func(*args, **kwargs)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/concurrent/futures/thread.py"", line 83, in _worker\n    work_item.run()\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/concurrent/futures/thread.py"", line 58, in run\n    result = self.fn(*self.args, **self.kwargs)\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/utils/python.py"", line 625, in _future_target_wrapper\n    return func(*args, **kwargs)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/langchain_core/runnables/base.py"", line 3564, in _invoke_step\n    return context.run(\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 178, in sync_wrapper\n    next(ret)\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 212, in convert_to_generator\n    _set_span_attributes(\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 109, in _set_span_attributes\n    set_function_call_attributes(span, ret, func_exception, all_kwargs)\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/experimental/otel_tracing/core/span.py"", line 152, in set_function_call_attributes\n    span, SpanAttributes.CALL.STACK, ""\\n"".join(traceback.format_stack())\n', 'ai.observability.call.kwargs.input': 'What is multi-headed attention?', 'ai.observability.call.kwargs.config': ""{'tags': [], 'metadata': {}, 'callbacks': <langchain_core.callbacks.manager.CallbackManager object at 0x366834110>, 'recursion_limit': 25, 'configurable': {}}""}",EventRecordType.SPAN,"{'telemetry.sdk.language': 'python', 'telemetry.sdk.name': 'opentelemetry', 'telemetry.sdk.version': '1.28.2', 'service.name': 'trulens'}",2025-01-31 23:38:57.635458,2025-01-31 23:38:57.636686,"{'trace_id': '252496542679367017208368062231198061843', 'parent_id': '6123394000859126479', 'span_id': '12513441295861183071'}"
4,"{'name': 'langchain_core.retrievers.BaseRetriever.invoke', 'kind': 1, 'parent_span_id': '6123394000859126479', 'status': 'STATUS_CODE_UNSET'}",9820448037654150858,"{'name': 'langchain_core.retrievers.BaseRetriever.invoke', 'ai.observability.span_type': 'unknown', 'ai.observability.domain': 'module', 'ai.observability.app_name': 'Simple RAG', 'ai.observability.app_version': 'v1', 'ai.observability.record_id': 'c4ea2874-9f60-4078-8819-edcd0dbf2fd0', 'ai.observability.run_name': 'test run', 'ai.observability.input_id': '42', 'ai.observability.call.return': [""page_content='Table 4: The Transformer generalizes well to English constituency parsing (Results are on Section 23\nof WSJ)\nParser Training WSJ 23 F1\nVinyals & Kaiser el al. (2014) [37] WSJ only, discriminative 88.3\nPetrov et al. (2006) [29] WSJ only, discriminative 90.4\nZhu et al. (2013) [40] WSJ only, discriminative 90.4\nDyer et al. (2016) [8] WSJ only, discriminative 91.7\nTransformer (4 layers) WSJ only, discriminative 91.3\nZhu et al. (2013) [40] semi-supervised 91.3\nHuang & Harper (2009) [14] semi-supervised 91.3\nMcClosky et al. (2006) [26] semi-supervised 92.1\nVinyals & Kaiser el al. (2014) [37] semi-supervised 92.1\nTransformer (4 layers) semi-supervised 92.7\nLuong et al. (2015) [23] multi-task 93.0\nDyer et al. (2016) [8] generative 93.3\nincreased the maximum output length to input length + 300. We used a beam size of 21 and Î± = 0.3\nfor both WSJ only and the semi-supervised setting.\nOur results in Table 4 show that despite the lack of task-specific tuning our model performs sur-\nprisingly well, yielding better results than all previously reported models with the exception of the\nRecurrent Neural Network Grammar [8].\nIn contrast to RNN sequence-to-sequence models [37], the Transformer outperforms the Berkeley-\nParser [29] even when training only on the WSJ training set of 40K sentences.\n7 Conclusion\nIn this work, we presented the Transformer, the first sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\nFor translation tasks, the Transformer can be trained significantly faster than architectures based\non recurrent or convolutional layers. On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art. In the former task our best\nmodel outperforms even all previously reported ensembles.\nWe are excited about the future of attention-based models and plan to apply them to other tasks. We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to efficiently handle large inputs and outputs\nsuch as images, audio and video. Making generation less sequential is another research goals of ours.\nThe code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor.\nAcknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\nReferences\n[1] Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. Layer normalization. arXiv preprint\narXiv:1607.06450, 2016.\n[2] Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. Neural machine translation by jointly\nlearning to align and translate. CoRR, abs/1409.0473, 2014.\n[3] Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V . Le. Massive exploration of neural\nmachine translation architectures. CoRR, abs/1703.03906, 2017.\n[4] Jianpeng Cheng, Li Dong, and Mirella Lapata. Long short-term memory-networks for machine\nreading. arXiv preprint arXiv:1601.06733, 2016.\n10' metadata={'source': './tests/unit/data/attention_is_all_you_need.pdf', 'page': 9}"", ""page_content='Table 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\nModel\nBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [18] 23.75\nDeep-Att + PosUnk [39] 39.2 1.0 Â· 1020\nGNMT + RL [38] 24.6 39.92 2.3 Â· 1019 1.4 Â· 1020\nConvS2S [9] 25.16 40.46 9.6 Â· 1018 1.5 Â· 1020\nMoE [32] 26.03 40.56 2.0 Â· 1019 1.2 Â· 1020\nDeep-Att + PosUnk Ensemble [39] 40.4 8.0 Â· 1020\nGNMT + RL Ensemble [38] 26.30 41.16 1.8 Â· 1020 1.1 Â· 1021\nConvS2S Ensemble [9] 26.36 41.29 7.7 Â· 1019 1.2 Â· 1021\nTransformer (base model) 27.3 38.1 3.3 Â· 1018\nTransformer (big) 28.4 41.8 2.3 Â· 1019\nResidual Dropout We apply dropout [33] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks. For the base model, we use a rate of\nPdrop = 0.1.\nLabel Smoothing During training, we employed label smoothing of value Ïµls = 0.1 [36]. This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4. The configuration of this model is\nlisted in the bottom line of Table 3. Training took 3.5 days on 8 P100 GPUs. Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\nOn the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4 the training cost of the\nprevious state-of-the-art model. The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop = 0.1, instead of 0.3.\nFor the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals. For the big models, we averaged the last 20 checkpoints. We\nused beam search with a beam size of 4 and length penalty Î± = 0.6 [38]. These hyperparameters\nwere chosen after experimentation on the development set. We set the maximum output length during\ninference to input length + 50, but terminate early when possible [38].\nTable 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature. We estimate the number of floating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision floating-point capacity of each GPU 5.\n6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\n5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n8' metadata={'source': './tests/unit/data/attention_is_all_you_need.pdf', 'page': 7}"", 'page_content=\'output values. These are concatenated and once again projected, resulting in the final values, as\ndepicted in Figure 2.\nMulti-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions. With a single attention head, averaging inhibits this.\nMultiHead(Q, K, V) = Concat(head1, ...,headh)WO\nwhere headi = Attention(QWQ\ni , KWK\ni , V WV\ni )\nWhere the projections are parameter matricesWQ\ni â RdmodelÃdk , WK\ni â RdmodelÃdk , WV\ni â RdmodelÃdv\nand WO â RhdvÃdmodel .\nIn this work we employ h = 8 parallel attention layers, or heads. For each of these we use\ndk = dv = dmodel/h = 64. Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\nâ¢ In ""encoder-decoder attention"" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder. This allows every\nposition in the decoder to attend over all positions in the input sequence. This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[38, 2, 9].\nâ¢ The encoder contains self-attention layers. In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder. Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\nâ¢ Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position. We need to prevent leftward\ninformation flow in the decoder to preserve the auto-regressive property. We implement this\ninside of scaled dot-product attention by masking out (setting to ââ) all values in the input\nof the softmax which correspond to illegal connections. See Figure 2.\n3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically. This\nconsists of two linear transformations with a ReLU activation in between.\nFFN(x) = max(0, xW1 + b1)W2 + b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer. Another way of describing this is as two convolutions with kernel size 1.\nThe dimensionality of input and output is dmodel = 512, and the inner-layer has dimensionality\ndff = 2048.\n3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel. We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities. In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [30]. In the embedding layers, we multiply those weights by âdmodel.\n5\' metadata={\'source\': \'./tests/unit/data/attention_is_all_you_need.pdf\', \'page\': 4}', ""page_content='Figure 1: The Transformer - model architecture.\nThe Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N = 6 identical layers. Each layer has two\nsub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, position-\nwise fully connected feed-forward network. We employ a residual connection [11] around each of\nthe two sub-layers, followed by layer normalization [ 1]. That is, the output of each sub-layer is\nLayerNorm(x + Sublayer(x)), where Sublayer(x) is the function implemented by the sub-layer\nitself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512.\nDecoder: The decoder is also composed of a stack of N = 6identical layers. In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack. Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization. We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions. This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position i can depend only on the known outputs at positions less than i.\n3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors. The output is computed as a weighted sum\n3' metadata={'source': './tests/unit/data/attention_is_all_you_need.pdf', 'page': 2}""], 'ai.observability.call.stack': '  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/threading.py"", line 1002, in _bootstrap\n    self._bootstrap_inner()\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/threading.py"", line 1045, in _bootstrap_inner\n    self.run()\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/threading.py"", line 982, in run\n    self._target(*self._args, **self._kwargs)\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/utils/python.py"", line 625, in _future_target_wrapper\n    return func(*args, **kwargs)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/concurrent/futures/thread.py"", line 83, in _worker\n    work_item.run()\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/concurrent/futures/thread.py"", line 58, in run\n    result = self.fn(*self.args, **self.kwargs)\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/utils/python.py"", line 625, in _future_target_wrapper\n    return func(*args, **kwargs)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/langchain_core/runnables/base.py"", line 3564, in _invoke_step\n    return context.run(\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/langchain_core/runnables/base.py"", line 2877, in invoke\n    input = context.run(step.invoke, input, config, **kwargs)\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 178, in sync_wrapper\n    next(ret)\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 212, in convert_to_generator\n    _set_span_attributes(\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 109, in _set_span_attributes\n    set_function_call_attributes(span, ret, func_exception, all_kwargs)\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/experimental/otel_tracing/core/span.py"", line 152, in set_function_call_attributes\n    span, SpanAttributes.CALL.STACK, ""\\n"".join(traceback.format_stack())\n', 'ai.observability.call.kwargs.input': 'What is multi-headed attention?', 'ai.observability.call.kwargs.config': ""{'tags': [], 'metadata': {}, 'callbacks': <langchain_core.callbacks.manager.CallbackManager object at 0x366835210>, 'recursion_limit': 25, 'configurable': {}}""}",EventRecordType.SPAN,"{'telemetry.sdk.language': 'python', 'telemetry.sdk.name': 'opentelemetry', 'telemetry.sdk.version': '1.28.2', 'service.name': 'trulens'}",2025-01-31 23:38:57.637200,2025-01-31 23:38:57.637669,"{'trace_id': '252496542679367017208368062231198061843', 'parent_id': '6123394000859126479', 'span_id': '9820448037654150858'}"
5,"{'name': 'langchain_core.vectorstores.base.VectorStoreRetriever._get_relevant_documents', 'kind': 1, 'parent_span_id': '9820448037654150858', 'status': 'STATUS_CODE_UNSET'}",4020865512188132918,"{'name': 'langchain_core.vectorstores.base.VectorStoreRetriever._get_relevant_documents', 'ai.observability.span_type': 'retrieval', 'ai.observability.domain': 'module', 'ai.observability.app_name': 'Simple RAG', 'ai.observability.app_version': 'v1', 'ai.observability.record_id': 'c4ea2874-9f60-4078-8819-edcd0dbf2fd0', 'ai.observability.run_name': 'test run', 'ai.observability.input_id': '42', 'ai.observability.call.return': [""page_content='Table 4: The Transformer generalizes well to English constituency parsing (Results are on Section 23\nof WSJ)\nParser Training WSJ 23 F1\nVinyals & Kaiser el al. (2014) [37] WSJ only, discriminative 88.3\nPetrov et al. (2006) [29] WSJ only, discriminative 90.4\nZhu et al. (2013) [40] WSJ only, discriminative 90.4\nDyer et al. (2016) [8] WSJ only, discriminative 91.7\nTransformer (4 layers) WSJ only, discriminative 91.3\nZhu et al. (2013) [40] semi-supervised 91.3\nHuang & Harper (2009) [14] semi-supervised 91.3\nMcClosky et al. (2006) [26] semi-supervised 92.1\nVinyals & Kaiser el al. (2014) [37] semi-supervised 92.1\nTransformer (4 layers) semi-supervised 92.7\nLuong et al. (2015) [23] multi-task 93.0\nDyer et al. (2016) [8] generative 93.3\nincreased the maximum output length to input length + 300. We used a beam size of 21 and Î± = 0.3\nfor both WSJ only and the semi-supervised setting.\nOur results in Table 4 show that despite the lack of task-specific tuning our model performs sur-\nprisingly well, yielding better results than all previously reported models with the exception of the\nRecurrent Neural Network Grammar [8].\nIn contrast to RNN sequence-to-sequence models [37], the Transformer outperforms the Berkeley-\nParser [29] even when training only on the WSJ training set of 40K sentences.\n7 Conclusion\nIn this work, we presented the Transformer, the first sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\nFor translation tasks, the Transformer can be trained significantly faster than architectures based\non recurrent or convolutional layers. On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art. In the former task our best\nmodel outperforms even all previously reported ensembles.\nWe are excited about the future of attention-based models and plan to apply them to other tasks. We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to efficiently handle large inputs and outputs\nsuch as images, audio and video. Making generation less sequential is another research goals of ours.\nThe code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor.\nAcknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\nReferences\n[1] Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. Layer normalization. arXiv preprint\narXiv:1607.06450, 2016.\n[2] Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. Neural machine translation by jointly\nlearning to align and translate. CoRR, abs/1409.0473, 2014.\n[3] Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V . Le. Massive exploration of neural\nmachine translation architectures. CoRR, abs/1703.03906, 2017.\n[4] Jianpeng Cheng, Li Dong, and Mirella Lapata. Long short-term memory-networks for machine\nreading. arXiv preprint arXiv:1601.06733, 2016.\n10' metadata={'source': './tests/unit/data/attention_is_all_you_need.pdf', 'page': 9}"", ""page_content='Table 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\nModel\nBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [18] 23.75\nDeep-Att + PosUnk [39] 39.2 1.0 Â· 1020\nGNMT + RL [38] 24.6 39.92 2.3 Â· 1019 1.4 Â· 1020\nConvS2S [9] 25.16 40.46 9.6 Â· 1018 1.5 Â· 1020\nMoE [32] 26.03 40.56 2.0 Â· 1019 1.2 Â· 1020\nDeep-Att + PosUnk Ensemble [39] 40.4 8.0 Â· 1020\nGNMT + RL Ensemble [38] 26.30 41.16 1.8 Â· 1020 1.1 Â· 1021\nConvS2S Ensemble [9] 26.36 41.29 7.7 Â· 1019 1.2 Â· 1021\nTransformer (base model) 27.3 38.1 3.3 Â· 1018\nTransformer (big) 28.4 41.8 2.3 Â· 1019\nResidual Dropout We apply dropout [33] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks. For the base model, we use a rate of\nPdrop = 0.1.\nLabel Smoothing During training, we employed label smoothing of value Ïµls = 0.1 [36]. This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4. The configuration of this model is\nlisted in the bottom line of Table 3. Training took 3.5 days on 8 P100 GPUs. Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\nOn the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4 the training cost of the\nprevious state-of-the-art model. The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop = 0.1, instead of 0.3.\nFor the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals. For the big models, we averaged the last 20 checkpoints. We\nused beam search with a beam size of 4 and length penalty Î± = 0.6 [38]. These hyperparameters\nwere chosen after experimentation on the development set. We set the maximum output length during\ninference to input length + 50, but terminate early when possible [38].\nTable 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature. We estimate the number of floating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision floating-point capacity of each GPU 5.\n6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\n5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n8' metadata={'source': './tests/unit/data/attention_is_all_you_need.pdf', 'page': 7}"", 'page_content=\'output values. These are concatenated and once again projected, resulting in the final values, as\ndepicted in Figure 2.\nMulti-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions. With a single attention head, averaging inhibits this.\nMultiHead(Q, K, V) = Concat(head1, ...,headh)WO\nwhere headi = Attention(QWQ\ni , KWK\ni , V WV\ni )\nWhere the projections are parameter matricesWQ\ni â RdmodelÃdk , WK\ni â RdmodelÃdk , WV\ni â RdmodelÃdv\nand WO â RhdvÃdmodel .\nIn this work we employ h = 8 parallel attention layers, or heads. For each of these we use\ndk = dv = dmodel/h = 64. Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\nâ¢ In ""encoder-decoder attention"" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder. This allows every\nposition in the decoder to attend over all positions in the input sequence. This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[38, 2, 9].\nâ¢ The encoder contains self-attention layers. In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder. Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\nâ¢ Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position. We need to prevent leftward\ninformation flow in the decoder to preserve the auto-regressive property. We implement this\ninside of scaled dot-product attention by masking out (setting to ââ) all values in the input\nof the softmax which correspond to illegal connections. See Figure 2.\n3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically. This\nconsists of two linear transformations with a ReLU activation in between.\nFFN(x) = max(0, xW1 + b1)W2 + b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer. Another way of describing this is as two convolutions with kernel size 1.\nThe dimensionality of input and output is dmodel = 512, and the inner-layer has dimensionality\ndff = 2048.\n3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel. We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities. In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [30]. In the embedding layers, we multiply those weights by âdmodel.\n5\' metadata={\'source\': \'./tests/unit/data/attention_is_all_you_need.pdf\', \'page\': 4}', ""page_content='Figure 1: The Transformer - model architecture.\nThe Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N = 6 identical layers. Each layer has two\nsub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, position-\nwise fully connected feed-forward network. We employ a residual connection [11] around each of\nthe two sub-layers, followed by layer normalization [ 1]. That is, the output of each sub-layer is\nLayerNorm(x + Sublayer(x)), where Sublayer(x) is the function implemented by the sub-layer\nitself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512.\nDecoder: The decoder is also composed of a stack of N = 6identical layers. In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack. Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization. We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions. This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position i can depend only on the known outputs at positions less than i.\n3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors. The output is computed as a weighted sum\n3' metadata={'source': './tests/unit/data/attention_is_all_you_need.pdf', 'page': 2}""], 'ai.observability.call.stack': '  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/threading.py"", line 1002, in _bootstrap\n    self._bootstrap_inner()\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/threading.py"", line 1045, in _bootstrap_inner\n    self.run()\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/threading.py"", line 982, in run\n    self._target(*self._args, **self._kwargs)\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/utils/python.py"", line 625, in _future_target_wrapper\n    return func(*args, **kwargs)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/concurrent/futures/thread.py"", line 83, in _worker\n    work_item.run()\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/concurrent/futures/thread.py"", line 58, in run\n    result = self.fn(*self.args, **self.kwargs)\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/utils/python.py"", line 625, in _future_target_wrapper\n    return func(*args, **kwargs)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/langchain_core/runnables/base.py"", line 3564, in _invoke_step\n    return context.run(\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/langchain_core/runnables/base.py"", line 2877, in invoke\n    input = context.run(step.invoke, input, config, **kwargs)\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 173, in sync_wrapper\n    if next(ret) == ""is_not_generator"":\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 193, in convert_to_generator\n    result = func(*args, **kwargs)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/langchain_core/retrievers.py"", line 245, in invoke\n    result = self._get_relevant_documents(\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 178, in sync_wrapper\n    next(ret)\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 212, in convert_to_generator\n    _set_span_attributes(\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 109, in _set_span_attributes\n    set_function_call_attributes(span, ret, func_exception, all_kwargs)\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/experimental/otel_tracing/core/span.py"", line 152, in set_function_call_attributes\n    span, SpanAttributes.CALL.STACK, ""\\n"".join(traceback.format_stack())\n', 'ai.observability.call.kwargs.run_manager': '<langchain_core.callbacks.manager.CallbackManagerForRetrieverRun object at 0x3668a0510>', 'ai.observability.call.kwargs.query': 'What is multi-headed attention?', 'ai.observability.retrieval.query_text': 'What is multi-headed attention?', 'ai.observability.retrieval.retrieved_contexts': ['Table 4: The Transformer generalizes well to English constituency parsing (Results are on Section 23\nof WSJ)\nParser Training WSJ 23 F1\nVinyals & Kaiser el al. (2014) [37] WSJ only, discriminative 88.3\nPetrov et al. (2006) [29] WSJ only, discriminative 90.4\nZhu et al. (2013) [40] WSJ only, discriminative 90.4\nDyer et al. (2016) [8] WSJ only, discriminative 91.7\nTransformer (4 layers) WSJ only, discriminative 91.3\nZhu et al. (2013) [40] semi-supervised 91.3\nHuang & Harper (2009) [14] semi-supervised 91.3\nMcClosky et al. (2006) [26] semi-supervised 92.1\nVinyals & Kaiser el al. (2014) [37] semi-supervised 92.1\nTransformer (4 layers) semi-supervised 92.7\nLuong et al. (2015) [23] multi-task 93.0\nDyer et al. (2016) [8] generative 93.3\nincreased the maximum output length to input length + 300. We used a beam size of 21 and Î± = 0.3\nfor both WSJ only and the semi-supervised setting.\nOur results in Table 4 show that despite the lack of task-specific tuning our model performs sur-\nprisingly well, yielding better results than all previously reported models with the exception of the\nRecurrent Neural Network Grammar [8].\nIn contrast to RNN sequence-to-sequence models [37], the Transformer outperforms the Berkeley-\nParser [29] even when training only on the WSJ training set of 40K sentences.\n7 Conclusion\nIn this work, we presented the Transformer, the first sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\nFor translation tasks, the Transformer can be trained significantly faster than architectures based\non recurrent or convolutional layers. On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art. In the former task our best\nmodel outperforms even all previously reported ensembles.\nWe are excited about the future of attention-based models and plan to apply them to other tasks. We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to efficiently handle large inputs and outputs\nsuch as images, audio and video. Making generation less sequential is another research goals of ours.\nThe code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor.\nAcknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\nReferences\n[1] Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. Layer normalization. arXiv preprint\narXiv:1607.06450, 2016.\n[2] Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. Neural machine translation by jointly\nlearning to align and translate. CoRR, abs/1409.0473, 2014.\n[3] Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V . Le. Massive exploration of neural\nmachine translation architectures. CoRR, abs/1703.03906, 2017.\n[4] Jianpeng Cheng, Li Dong, and Mirella Lapata. Long short-term memory-networks for machine\nreading. arXiv preprint arXiv:1601.06733, 2016.\n10', 'Table 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\nModel\nBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [18] 23.75\nDeep-Att + PosUnk [39] 39.2 1.0 Â· 1020\nGNMT + RL [38] 24.6 39.92 2.3 Â· 1019 1.4 Â· 1020\nConvS2S [9] 25.16 40.46 9.6 Â· 1018 1.5 Â· 1020\nMoE [32] 26.03 40.56 2.0 Â· 1019 1.2 Â· 1020\nDeep-Att + PosUnk Ensemble [39] 40.4 8.0 Â· 1020\nGNMT + RL Ensemble [38] 26.30 41.16 1.8 Â· 1020 1.1 Â· 1021\nConvS2S Ensemble [9] 26.36 41.29 7.7 Â· 1019 1.2 Â· 1021\nTransformer (base model) 27.3 38.1 3.3 Â· 1018\nTransformer (big) 28.4 41.8 2.3 Â· 1019\nResidual Dropout We apply dropout [33] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks. For the base model, we use a rate of\nPdrop = 0.1.\nLabel Smoothing During training, we employed label smoothing of value Ïµls = 0.1 [36]. This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4. The configuration of this model is\nlisted in the bottom line of Table 3. Training took 3.5 days on 8 P100 GPUs. Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\nOn the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4 the training cost of the\nprevious state-of-the-art model. The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop = 0.1, instead of 0.3.\nFor the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals. For the big models, we averaged the last 20 checkpoints. We\nused beam search with a beam size of 4 and length penalty Î± = 0.6 [38]. These hyperparameters\nwere chosen after experimentation on the development set. We set the maximum output length during\ninference to input length + 50, but terminate early when possible [38].\nTable 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature. We estimate the number of floating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision floating-point capacity of each GPU 5.\n6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\n5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n8', 'output values. These are concatenated and once again projected, resulting in the final values, as\ndepicted in Figure 2.\nMulti-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions. With a single attention head, averaging inhibits this.\nMultiHead(Q, K, V) = Concat(head1, ...,headh)WO\nwhere headi = Attention(QWQ\ni , KWK\ni , V WV\ni )\nWhere the projections are parameter matricesWQ\ni â RdmodelÃdk , WK\ni â RdmodelÃdk , WV\ni â RdmodelÃdv\nand WO â RhdvÃdmodel .\nIn this work we employ h = 8 parallel attention layers, or heads. For each of these we use\ndk = dv = dmodel/h = 64. Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\nâ¢ In ""encoder-decoder attention"" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder. This allows every\nposition in the decoder to attend over all positions in the input sequence. This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[38, 2, 9].\nâ¢ The encoder contains self-attention layers. In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder. Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\nâ¢ Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position. We need to prevent leftward\ninformation flow in the decoder to preserve the auto-regressive property. We implement this\ninside of scaled dot-product attention by masking out (setting to ââ) all values in the input\nof the softmax which correspond to illegal connections. See Figure 2.\n3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically. This\nconsists of two linear transformations with a ReLU activation in between.\nFFN(x) = max(0, xW1 + b1)W2 + b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer. Another way of describing this is as two convolutions with kernel size 1.\nThe dimensionality of input and output is dmodel = 512, and the inner-layer has dimensionality\ndff = 2048.\n3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel. We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities. In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [30]. In the embedding layers, we multiply those weights by âdmodel.\n5', 'Figure 1: The Transformer - model architecture.\nThe Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N = 6 identical layers. Each layer has two\nsub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, position-\nwise fully connected feed-forward network. We employ a residual connection [11] around each of\nthe two sub-layers, followed by layer normalization [ 1]. That is, the output of each sub-layer is\nLayerNorm(x + Sublayer(x)), where Sublayer(x) is the function implemented by the sub-layer\nitself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512.\nDecoder: The decoder is also composed of a stack of N = 6identical layers. In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack. Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization. We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions. This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position i can depend only on the known outputs at positions less than i.\n3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors. The output is computed as a weighted sum\n3']}",EventRecordType.SPAN,"{'telemetry.sdk.language': 'python', 'telemetry.sdk.name': 'opentelemetry', 'telemetry.sdk.version': '1.28.2', 'service.name': 'trulens'}",2025-01-31 23:38:57.637271,2025-01-31 23:38:57.637553,"{'trace_id': '252496542679367017208368062231198061843', 'parent_id': '9820448037654150858', 'span_id': '4020865512188132918'}"
6,"{'name': 'tests.unit.test_otel_tru_chain.TestOtelTruChain._create_simple_rag.<locals>.format_docs', 'kind': 1, 'parent_span_id': '6123394000859126479', 'status': 'STATUS_CODE_UNSET'}",16870024663402904180,"{'name': 'tests.unit.test_otel_tru_chain.TestOtelTruChain._create_simple_rag.<locals>.format_docs', 'ai.observability.span_type': 'unknown', 'ai.observability.domain': 'module', 'ai.observability.app_name': 'Simple RAG', 'ai.observability.app_version': 'v1', 'ai.observability.record_id': 'c4ea2874-9f60-4078-8819-edcd0dbf2fd0', 'ai.observability.run_name': 'test run', 'ai.observability.input_id': '42', 'ai.observability.call.return': 'Table 4: The Transformer generalizes well to English constituency parsing (Results are on Section 23\nof WSJ)\nParser Training WSJ 23 F1\nVinyals & Kaiser el al. (2014) [37] WSJ only, discriminative 88.3\nPetrov et al. (2006) [29] WSJ only, discriminative 90.4\nZhu et al. (2013) [40] WSJ only, discriminative 90.4\nDyer et al. (2016) [8] WSJ only, discriminative 91.7\nTransformer (4 layers) WSJ only, discriminative 91.3\nZhu et al. (2013) [40] semi-supervised 91.3\nHuang & Harper (2009) [14] semi-supervised 91.3\nMcClosky et al. (2006) [26] semi-supervised 92.1\nVinyals & Kaiser el al. (2014) [37] semi-supervised 92.1\nTransformer (4 layers) semi-supervised 92.7\nLuong et al. (2015) [23] multi-task 93.0\nDyer et al. (2016) [8] generative 93.3\nincreased the maximum output length to input length + 300. We used a beam size of 21 and Î± = 0.3\nfor both WSJ only and the semi-supervised setting.\nOur results in Table 4 show that despite the lack of task-specific tuning our model performs sur-\nprisingly well, yielding better results than all previously reported models with the exception of the\nRecurrent Neural Network Grammar [8].\nIn contrast to RNN sequence-to-sequence models [37], the Transformer outperforms the Berkeley-\nParser [29] even when training only on the WSJ training set of 40K sentences.\n7 Conclusion\nIn this work, we presented the Transformer, the first sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\nFor translation tasks, the Transformer can be trained significantly faster than architectures based\non recurrent or convolutional layers. On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art. In the former task our best\nmodel outperforms even all previously reported ensembles.\nWe are excited about the future of attention-based models and plan to apply them to other tasks. We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to efficiently handle large inputs and outputs\nsuch as images, audio and video. Making generation less sequential is another research goals of ours.\nThe code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor.\nAcknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\nReferences\n[1] Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. Layer normalization. arXiv preprint\narXiv:1607.06450, 2016.\n[2] Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. Neural machine translation by jointly\nlearning to align and translate. CoRR, abs/1409.0473, 2014.\n[3] Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V . Le. Massive exploration of neural\nmachine translation architectures. CoRR, abs/1703.03906, 2017.\n[4] Jianpeng Cheng, Li Dong, and Mirella Lapata. Long short-term memory-networks for machine\nreading. arXiv preprint arXiv:1601.06733, 2016.\n10\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\nModel\nBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [18] 23.75\nDeep-Att + PosUnk [39] 39.2 1.0 Â· 1020\nGNMT + RL [38] 24.6 39.92 2.3 Â· 1019 1.4 Â· 1020\nConvS2S [9] 25.16 40.46 9.6 Â· 1018 1.5 Â· 1020\nMoE [32] 26.03 40.56 2.0 Â· 1019 1.2 Â· 1020\nDeep-Att + PosUnk Ensemble [39] 40.4 8.0 Â· 1020\nGNMT + RL Ensemble [38] 26.30 41.16 1.8 Â· 1020 1.1 Â· 1021\nConvS2S Ensemble [9] 26.36 41.29 7.7 Â· 1019 1.2 Â· 1021\nTransformer (base model) 27.3 38.1 3.3 Â· 1018\nTransformer (big) 28.4 41.8 2.3 Â· 1019\nResidual Dropout We apply dropout [33] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks. For the base model, we use a rate of\nPdrop = 0.1.\nLabel Smoothing During training, we employed label smoothing of value Ïµls = 0.1 [36]. This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4. The configuration of this model is\nlisted in the bottom line of Table 3. Training took 3.5 days on 8 P100 GPUs. Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\nOn the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4 the training cost of the\nprevious state-of-the-art model. The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop = 0.1, instead of 0.3.\nFor the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals. For the big models, we averaged the last 20 checkpoints. We\nused beam search with a beam size of 4 and length penalty Î± = 0.6 [38]. These hyperparameters\nwere chosen after experimentation on the development set. We set the maximum output length during\ninference to input length + 50, but terminate early when possible [38].\nTable 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature. We estimate the number of floating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision floating-point capacity of each GPU 5.\n6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\n5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n8\n\noutput values. These are concatenated and once again projected, resulting in the final values, as\ndepicted in Figure 2.\nMulti-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions. With a single attention head, averaging inhibits this.\nMultiHead(Q, K, V) = Concat(head1, ...,headh)WO\nwhere headi = Attention(QWQ\ni , KWK\ni , V WV\ni )\nWhere the projections are parameter matricesWQ\ni â RdmodelÃdk , WK\ni â RdmodelÃdk , WV\ni â RdmodelÃdv\nand WO â RhdvÃdmodel .\nIn this work we employ h = 8 parallel attention layers, or heads. For each of these we use\ndk = dv = dmodel/h = 64. Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\nâ¢ In ""encoder-decoder attention"" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder. This allows every\nposition in the decoder to attend over all positions in the input sequence. This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[38, 2, 9].\nâ¢ The encoder contains self-attention layers. In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder. Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\nâ¢ Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position. We need to prevent leftward\ninformation flow in the decoder to preserve the auto-regressive property. We implement this\ninside of scaled dot-product attention by masking out (setting to ââ) all values in the input\nof the softmax which correspond to illegal connections. See Figure 2.\n3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically. This\nconsists of two linear transformations with a ReLU activation in between.\nFFN(x) = max(0, xW1 + b1)W2 + b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer. Another way of describing this is as two convolutions with kernel size 1.\nThe dimensionality of input and output is dmodel = 512, and the inner-layer has dimensionality\ndff = 2048.\n3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel. We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities. In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [30]. In the embedding layers, we multiply those weights by âdmodel.\n5\n\nFigure 1: The Transformer - model architecture.\nThe Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N = 6 identical layers. Each layer has two\nsub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, position-\nwise fully connected feed-forward network. We employ a residual connection [11] around each of\nthe two sub-layers, followed by layer normalization [ 1]. That is, the output of each sub-layer is\nLayerNorm(x + Sublayer(x)), where Sublayer(x) is the function implemented by the sub-layer\nitself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512.\nDecoder: The decoder is also composed of a stack of N = 6identical layers. In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack. Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization. We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions. This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position i can depend only on the known outputs at positions less than i.\n3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors. The output is computed as a weighted sum\n3', 'ai.observability.call.stack': '  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/threading.py"", line 1002, in _bootstrap\n    self._bootstrap_inner()\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/threading.py"", line 1045, in _bootstrap_inner\n    self.run()\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/threading.py"", line 982, in run\n    self._target(*self._args, **self._kwargs)\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/utils/python.py"", line 625, in _future_target_wrapper\n    return func(*args, **kwargs)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/concurrent/futures/thread.py"", line 83, in _worker\n    work_item.run()\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/concurrent/futures/thread.py"", line 58, in run\n    result = self.fn(*self.args, **self.kwargs)\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/utils/python.py"", line 625, in _future_target_wrapper\n    return func(*args, **kwargs)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/langchain_core/runnables/base.py"", line 3564, in _invoke_step\n    return context.run(\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/langchain_core/runnables/base.py"", line 2879, in invoke\n    input = context.run(step.invoke, input, config)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/langchain_core/runnables/base.py"", line 4475, in invoke\n    return self._call_with_config(\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/langchain_core/runnables/base.py"", line 1786, in _call_with_config\n    context.run(\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/langchain_core/runnables/config.py"", line 398, in call_func_with_variable_args\n    return func(input, **kwargs)  # type: ignore[call-arg]\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/langchain_core/runnables/base.py"", line 4331, in _invoke\n    output = call_func_with_variable_args(\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/langchain_core/runnables/config.py"", line 398, in call_func_with_variable_args\n    return func(input, **kwargs)  # type: ignore[call-arg]\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 178, in sync_wrapper\n    next(ret)\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 212, in convert_to_generator\n    _set_span_attributes(\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 109, in _set_span_attributes\n    set_function_call_attributes(span, ret, func_exception, all_kwargs)\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/experimental/otel_tracing/core/span.py"", line 152, in set_function_call_attributes\n    span, SpanAttributes.CALL.STACK, ""\\n"".join(traceback.format_stack())\n', 'ai.observability.call.kwargs.docs': [""page_content='Table 4: The Transformer generalizes well to English constituency parsing (Results are on Section 23\nof WSJ)\nParser Training WSJ 23 F1\nVinyals & Kaiser el al. (2014) [37] WSJ only, discriminative 88.3\nPetrov et al. (2006) [29] WSJ only, discriminative 90.4\nZhu et al. (2013) [40] WSJ only, discriminative 90.4\nDyer et al. (2016) [8] WSJ only, discriminative 91.7\nTransformer (4 layers) WSJ only, discriminative 91.3\nZhu et al. (2013) [40] semi-supervised 91.3\nHuang & Harper (2009) [14] semi-supervised 91.3\nMcClosky et al. (2006) [26] semi-supervised 92.1\nVinyals & Kaiser el al. (2014) [37] semi-supervised 92.1\nTransformer (4 layers) semi-supervised 92.7\nLuong et al. (2015) [23] multi-task 93.0\nDyer et al. (2016) [8] generative 93.3\nincreased the maximum output length to input length + 300. We used a beam size of 21 and Î± = 0.3\nfor both WSJ only and the semi-supervised setting.\nOur results in Table 4 show that despite the lack of task-specific tuning our model performs sur-\nprisingly well, yielding better results than all previously reported models with the exception of the\nRecurrent Neural Network Grammar [8].\nIn contrast to RNN sequence-to-sequence models [37], the Transformer outperforms the Berkeley-\nParser [29] even when training only on the WSJ training set of 40K sentences.\n7 Conclusion\nIn this work, we presented the Transformer, the first sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\nFor translation tasks, the Transformer can be trained significantly faster than architectures based\non recurrent or convolutional layers. On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art. In the former task our best\nmodel outperforms even all previously reported ensembles.\nWe are excited about the future of attention-based models and plan to apply them to other tasks. We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to efficiently handle large inputs and outputs\nsuch as images, audio and video. Making generation less sequential is another research goals of ours.\nThe code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor.\nAcknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\nReferences\n[1] Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. Layer normalization. arXiv preprint\narXiv:1607.06450, 2016.\n[2] Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. Neural machine translation by jointly\nlearning to align and translate. CoRR, abs/1409.0473, 2014.\n[3] Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V . Le. Massive exploration of neural\nmachine translation architectures. CoRR, abs/1703.03906, 2017.\n[4] Jianpeng Cheng, Li Dong, and Mirella Lapata. Long short-term memory-networks for machine\nreading. arXiv preprint arXiv:1601.06733, 2016.\n10' metadata={'source': './tests/unit/data/attention_is_all_you_need.pdf', 'page': 9}"", ""page_content='Table 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\nModel\nBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [18] 23.75\nDeep-Att + PosUnk [39] 39.2 1.0 Â· 1020\nGNMT + RL [38] 24.6 39.92 2.3 Â· 1019 1.4 Â· 1020\nConvS2S [9] 25.16 40.46 9.6 Â· 1018 1.5 Â· 1020\nMoE [32] 26.03 40.56 2.0 Â· 1019 1.2 Â· 1020\nDeep-Att + PosUnk Ensemble [39] 40.4 8.0 Â· 1020\nGNMT + RL Ensemble [38] 26.30 41.16 1.8 Â· 1020 1.1 Â· 1021\nConvS2S Ensemble [9] 26.36 41.29 7.7 Â· 1019 1.2 Â· 1021\nTransformer (base model) 27.3 38.1 3.3 Â· 1018\nTransformer (big) 28.4 41.8 2.3 Â· 1019\nResidual Dropout We apply dropout [33] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks. For the base model, we use a rate of\nPdrop = 0.1.\nLabel Smoothing During training, we employed label smoothing of value Ïµls = 0.1 [36]. This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4. The configuration of this model is\nlisted in the bottom line of Table 3. Training took 3.5 days on 8 P100 GPUs. Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\nOn the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4 the training cost of the\nprevious state-of-the-art model. The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop = 0.1, instead of 0.3.\nFor the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals. For the big models, we averaged the last 20 checkpoints. We\nused beam search with a beam size of 4 and length penalty Î± = 0.6 [38]. These hyperparameters\nwere chosen after experimentation on the development set. We set the maximum output length during\ninference to input length + 50, but terminate early when possible [38].\nTable 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature. We estimate the number of floating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision floating-point capacity of each GPU 5.\n6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\n5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n8' metadata={'source': './tests/unit/data/attention_is_all_you_need.pdf', 'page': 7}"", 'page_content=\'output values. These are concatenated and once again projected, resulting in the final values, as\ndepicted in Figure 2.\nMulti-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions. With a single attention head, averaging inhibits this.\nMultiHead(Q, K, V) = Concat(head1, ...,headh)WO\nwhere headi = Attention(QWQ\ni , KWK\ni , V WV\ni )\nWhere the projections are parameter matricesWQ\ni â RdmodelÃdk , WK\ni â RdmodelÃdk , WV\ni â RdmodelÃdv\nand WO â RhdvÃdmodel .\nIn this work we employ h = 8 parallel attention layers, or heads. For each of these we use\ndk = dv = dmodel/h = 64. Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\nâ¢ In ""encoder-decoder attention"" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder. This allows every\nposition in the decoder to attend over all positions in the input sequence. This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[38, 2, 9].\nâ¢ The encoder contains self-attention layers. In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder. Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\nâ¢ Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position. We need to prevent leftward\ninformation flow in the decoder to preserve the auto-regressive property. We implement this\ninside of scaled dot-product attention by masking out (setting to ââ) all values in the input\nof the softmax which correspond to illegal connections. See Figure 2.\n3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically. This\nconsists of two linear transformations with a ReLU activation in between.\nFFN(x) = max(0, xW1 + b1)W2 + b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer. Another way of describing this is as two convolutions with kernel size 1.\nThe dimensionality of input and output is dmodel = 512, and the inner-layer has dimensionality\ndff = 2048.\n3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel. We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities. In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [30]. In the embedding layers, we multiply those weights by âdmodel.\n5\' metadata={\'source\': \'./tests/unit/data/attention_is_all_you_need.pdf\', \'page\': 4}', ""page_content='Figure 1: The Transformer - model architecture.\nThe Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N = 6 identical layers. Each layer has two\nsub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, position-\nwise fully connected feed-forward network. We employ a residual connection [11] around each of\nthe two sub-layers, followed by layer normalization [ 1]. That is, the output of each sub-layer is\nLayerNorm(x + Sublayer(x)), where Sublayer(x) is the function implemented by the sub-layer\nitself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512.\nDecoder: The decoder is also composed of a stack of N = 6identical layers. In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack. Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization. We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions. This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position i can depend only on the known outputs at positions less than i.\n3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors. The output is computed as a weighted sum\n3' metadata={'source': './tests/unit/data/attention_is_all_you_need.pdf', 'page': 2}""], 'ai.observability.unknown.best_baby': 'Kojikun'}",EventRecordType.SPAN,"{'telemetry.sdk.language': 'python', 'telemetry.sdk.name': 'opentelemetry', 'telemetry.sdk.version': '1.28.2', 'service.name': 'trulens'}",2025-01-31 23:38:57.637822,2025-01-31 23:38:57.637934,"{'trace_id': '252496542679367017208368062231198061843', 'parent_id': '6123394000859126479', 'span_id': '16870024663402904180'}"
7,"{'name': 'langchain_core.prompts.base.BasePromptTemplate.invoke', 'kind': 1, 'parent_span_id': '12617144269860690225', 'status': 'STATUS_CODE_UNSET'}",10229560595490986656,"{'name': 'langchain_core.prompts.base.BasePromptTemplate.invoke', 'ai.observability.span_type': 'unknown', 'ai.observability.domain': 'module', 'ai.observability.app_name': 'Simple RAG', 'ai.observability.app_version': 'v1', 'ai.observability.record_id': 'c4ea2874-9f60-4078-8819-edcd0dbf2fd0', 'ai.observability.run_name': 'test run', 'ai.observability.input_id': '42', 'ai.observability.call.return': 'messages=[HumanMessage(content=\'You are an assistant for question-answering tasks. Use the following pieces of retrieved context to answer the question. If you don\\\'t know the answer, just say that you don\\\'t know. Use three sentences maximum and keep the answer concise.\\nQuestion: What is multi-headed attention? \\nContext: Table 4: The Transformer generalizes well to English constituency parsing (Results are on Section 23\\nof WSJ)\\nParser Training WSJ 23 F1\\nVinyals & Kaiser el al. (2014) [37] WSJ only, discriminative 88.3\\nPetrov et al. (2006) [29] WSJ only, discriminative 90.4\\nZhu et al. (2013) [40] WSJ only, discriminative 90.4\\nDyer et al. (2016) [8] WSJ only, discriminative 91.7\\nTransformer (4 layers) WSJ only, discriminative 91.3\\nZhu et al. (2013) [40] semi-supervised 91.3\\nHuang & Harper (2009) [14] semi-supervised 91.3\\nMcClosky et al. (2006) [26] semi-supervised 92.1\\nVinyals & Kaiser el al. (2014) [37] semi-supervised 92.1\\nTransformer (4 layers) semi-supervised 92.7\\nLuong et al. (2015) [23] multi-task 93.0\\nDyer et al. (2016) [8] generative 93.3\\nincreased the maximum output length to input length + 300. We used a beam size of 21 and Î± = 0.3\\nfor both WSJ only and the semi-supervised setting.\\nOur results in Table 4 show that despite the lack of task-specific tuning our model performs sur-\\nprisingly well, yielding better results than all previously reported models with the exception of the\\nRecurrent Neural Network Grammar [8].\\nIn contrast to RNN sequence-to-sequence models [37], the Transformer outperforms the Berkeley-\\nParser [29] even when training only on the WSJ training set of 40K sentences.\\n7 Conclusion\\nIn this work, we presented the Transformer, the first sequence transduction model based entirely on\\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\\nmulti-headed self-attention.\\nFor translation tasks, the Transformer can be trained significantly faster than architectures based\\non recurrent or convolutional layers. On both WMT 2014 English-to-German and WMT 2014\\nEnglish-to-French translation tasks, we achieve a new state of the art. In the former task our best\\nmodel outperforms even all previously reported ensembles.\\nWe are excited about the future of attention-based models and plan to apply them to other tasks. We\\nplan to extend the Transformer to problems involving input and output modalities other than text and\\nto investigate local, restricted attention mechanisms to efficiently handle large inputs and outputs\\nsuch as images, audio and video. Making generation less sequential is another research goals of ours.\\nThe code we used to train and evaluate our models is available at https://github.com/\\ntensorflow/tensor2tensor.\\nAcknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\\ncomments, corrections and inspiration.\\nReferences\\n[1] Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. Layer normalization. arXiv preprint\\narXiv:1607.06450, 2016.\\n[2] Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. Neural machine translation by jointly\\nlearning to align and translate. CoRR, abs/1409.0473, 2014.\\n[3] Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V . Le. Massive exploration of neural\\nmachine translation architectures. CoRR, abs/1703.03906, 2017.\\n[4] Jianpeng Cheng, Li Dong, and Mirella Lapata. Long short-term memory-networks for machine\\nreading. arXiv preprint arXiv:1601.06733, 2016.\\n10\\n\\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\\nModel\\nBLEU Training Cost (FLOPs)\\nEN-DE EN-FR EN-DE EN-FR\\nByteNet [18] 23.75\\nDeep-Att + PosUnk [39] 39.2 1.0 Â· 1020\\nGNMT + RL [38] 24.6 39.92 2.3 Â· 1019 1.4 Â· 1020\\nConvS2S [9] 25.16 40.46 9.6 Â· 1018 1.5 Â· 1020\\nMoE [32] 26.03 40.56 2.0 Â· 1019 1.2 Â· 1020\\nDeep-Att + PosUnk Ensemble [39] 40.4 8.0 Â· 1020\\nGNMT + RL Ensemble [38] 26.30 41.16 1.8 Â· 1020 1.1 Â· 1021\\nConvS2S Ensemble [9] 26.36 41.29 7.7 Â· 1019 1.2 Â· 1021\\nTransformer (base model) 27.3 38.1 3.3 Â· 1018\\nTransformer (big) 28.4 41.8 2.3 Â· 1019\\nResidual Dropout We apply dropout [33] to the output of each sub-layer, before it is added to the\\nsub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the\\npositional encodings in both the encoder and decoder stacks. For the base model, we use a rate of\\nPdrop = 0.1.\\nLabel Smoothing During training, we employed label smoothing of value Ïµls = 0.1 [36]. This\\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\\n6 Results\\n6.1 Machine Translation\\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\\nBLEU, establishing a new state-of-the-art BLEU score of 28.4. The configuration of this model is\\nlisted in the bottom line of Table 3. Training took 3.5 days on 8 P100 GPUs. Even our base model\\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\\nthe competitive models.\\nOn the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\\noutperforming all of the previously published single models, at less than 1/4 the training cost of the\\nprevious state-of-the-art model. The Transformer (big) model trained for English-to-French used\\ndropout rate Pdrop = 0.1, instead of 0.3.\\nFor the base models, we used a single model obtained by averaging the last 5 checkpoints, which\\nwere written at 10-minute intervals. For the big models, we averaged the last 20 checkpoints. We\\nused beam search with a beam size of 4 and length penalty Î± = 0.6 [38]. These hyperparameters\\nwere chosen after experimentation on the development set. We set the maximum output length during\\ninference to input length + 50, but terminate early when possible [38].\\nTable 2 summarizes our results and compares our translation quality and training costs to other model\\narchitectures from the literature. We estimate the number of floating point operations used to train a\\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\\nsingle-precision floating-point capacity of each GPU 5.\\n6.2 Model Variations\\nTo evaluate the importance of different components of the Transformer, we varied our base model\\nin different ways, measuring the change in performance on English-to-German translation on the\\n5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\\n8\\n\\noutput values. These are concatenated and once again projected, resulting in the final values, as\\ndepicted in Figure 2.\\nMulti-head attention allows the model to jointly attend to information from different representation\\nsubspaces at different positions. With a single attention head, averaging inhibits this.\\nMultiHead(Q, K, V) = Concat(head1, ...,headh)WO\\nwhere headi = Attention(QWQ\\ni , KWK\\ni , V WV\\ni )\\nWhere the projections are parameter matricesWQ\\ni â RdmodelÃdk , WK\\ni â RdmodelÃdk , WV\\ni â RdmodelÃdv\\nand WO â RhdvÃdmodel .\\nIn this work we employ h = 8 parallel attention layers, or heads. For each of these we use\\ndk = dv = dmodel/h = 64. Due to the reduced dimension of each head, the total computational cost\\nis similar to that of single-head attention with full dimensionality.\\n3.2.3 Applications of Attention in our Model\\nThe Transformer uses multi-head attention in three different ways:\\nâ¢ In ""encoder-decoder attention"" layers, the queries come from the previous decoder layer,\\nand the memory keys and values come from the output of the encoder. This allows every\\nposition in the decoder to attend over all positions in the input sequence. This mimics the\\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\\n[38, 2, 9].\\nâ¢ The encoder contains self-attention layers. In a self-attention layer all of the keys, values\\nand queries come from the same place, in this case, the output of the previous layer in the\\nencoder. Each position in the encoder can attend to all positions in the previous layer of the\\nencoder.\\nâ¢ Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\\nall positions in the decoder up to and including that position. We need to prevent leftward\\ninformation flow in the decoder to preserve the auto-regressive property. We implement this\\ninside of scaled dot-product attention by masking out (setting to ââ) all values in the input\\nof the softmax which correspond to illegal connections. See Figure 2.\\n3.3 Position-wise Feed-Forward Networks\\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\\nconnected feed-forward network, which is applied to each position separately and identically. This\\nconsists of two linear transformations with a ReLU activation in between.\\nFFN(x) = max(0, xW1 + b1)W2 + b2 (2)\\nWhile the linear transformations are the same across different positions, they use different parameters\\nfrom layer to layer. Another way of describing this is as two convolutions with kernel size 1.\\nThe dimensionality of input and output is dmodel = 512, and the inner-layer has dimensionality\\ndff = 2048.\\n3.4 Embeddings and Softmax\\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\\ntokens and output tokens to vectors of dimension dmodel. We also use the usual learned linear transfor-\\nmation and softmax function to convert the decoder output to predicted next-token probabilities. In\\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\\nlinear transformation, similar to [30]. In the embedding layers, we multiply those weights by âdmodel.\\n5\\n\\nFigure 1: The Transformer - model architecture.\\nThe Transformer follows this overall architecture using stacked self-attention and point-wise, fully\\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\\nrespectively.\\n3.1 Encoder and Decoder Stacks\\nEncoder: The encoder is composed of a stack of N = 6 identical layers. Each layer has two\\nsub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, position-\\nwise fully connected feed-forward network. We employ a residual connection [11] around each of\\nthe two sub-layers, followed by layer normalization [ 1]. That is, the output of each sub-layer is\\nLayerNorm(x + Sublayer(x)), where Sublayer(x) is the function implemented by the sub-layer\\nitself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding\\nlayers, produce outputs of dimension dmodel = 512.\\nDecoder: The decoder is also composed of a stack of N = 6identical layers. In addition to the two\\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\\nattention over the output of the encoder stack. Similar to the encoder, we employ residual connections\\naround each of the sub-layers, followed by layer normalization. We also modify the self-attention\\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions. This\\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\\npredictions for position i can depend only on the known outputs at positions less than i.\\n3.2 Attention\\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\\nwhere the query, keys, values, and output are all vectors. The output is computed as a weighted sum\\n3 \\nAnswer:\')]', 'ai.observability.call.stack': '  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/bin/pytest"", line 8, in <module>\n    sys.exit(console_main())\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/config/__init__.py"", line 201, in console_main\n    code = main()\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/config/__init__.py"", line 175, in main\n    ret: ExitCode | int = config.hook.pytest_cmdline_main(config=config)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_hooks.py"", line 513, in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_manager.py"", line 120, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_callers.py"", line 103, in _multicall\n    res = hook_impl.function(*args)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/main.py"", line 330, in pytest_cmdline_main\n    return wrap_session(config, _main)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/main.py"", line 283, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/main.py"", line 337, in _main\n    config.hook.pytest_runtestloop(session=session)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_hooks.py"", line 513, in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_manager.py"", line 120, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_callers.py"", line 103, in _multicall\n    res = hook_impl.function(*args)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/main.py"", line 362, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_hooks.py"", line 513, in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_manager.py"", line 120, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_callers.py"", line 103, in _multicall\n    res = hook_impl.function(*args)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/runner.py"", line 113, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/runner.py"", line 132, in runtestprotocol\n    reports.append(call_and_report(item, ""call"", log))\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/runner.py"", line 241, in call_and_report\n    call = CallInfo.from_call(\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/runner.py"", line 341, in from_call\n    result: TResult | None = func()\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/runner.py"", line 242, in <lambda>\n    lambda: runtest_hook(item=item, **kwds), when=when, reraise=reraise\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_hooks.py"", line 513, in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_manager.py"", line 120, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_callers.py"", line 103, in _multicall\n    res = hook_impl.function(*args)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/runner.py"", line 174, in pytest_runtest_call\n    item.runtest()\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/unittest.py"", line 351, in runtest\n    testcase(result=self)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/unittest/case.py"", line 678, in __call__\n    return self.run(*args, **kwds)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/unittest/case.py"", line 623, in run\n    self._callTestMethod(testMethod)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/unittest/case.py"", line 579, in _callTestMethod\n    if method() is not None:\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/tests/unit/test_otel_tru_chain.py"", line 75, in test_smoke\n    rag_chain.invoke(""What is multi-headed attention?"")\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 173, in sync_wrapper\n    if next(ret) == ""is_not_generator"":\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 193, in convert_to_generator\n    result = func(*args, **kwargs)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/langchain_core/runnables/base.py"", line 2879, in invoke\n    input = context.run(step.invoke, input, config)\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 178, in sync_wrapper\n    next(ret)\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 212, in convert_to_generator\n    _set_span_attributes(\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 109, in _set_span_attributes\n    set_function_call_attributes(span, ret, func_exception, all_kwargs)\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/experimental/otel_tracing/core/span.py"", line 152, in set_function_call_attributes\n    span, SpanAttributes.CALL.STACK, ""\\n"".join(traceback.format_stack())\n', 'ai.observability.call.kwargs.input': '{\'question\': \'What is multi-headed attention?\', \'context\': \'Table 4: The Transformer generalizes well to English constituency parsing (Results are on Section 23\\nof WSJ)\\nParser Training WSJ 23 F1\\nVinyals & Kaiser el al. (2014) [37] WSJ only, discriminative 88.3\\nPetrov et al. (2006) [29] WSJ only, discriminative 90.4\\nZhu et al. (2013) [40] WSJ only, discriminative 90.4\\nDyer et al. (2016) [8] WSJ only, discriminative 91.7\\nTransformer (4 layers) WSJ only, discriminative 91.3\\nZhu et al. (2013) [40] semi-supervised 91.3\\nHuang & Harper (2009) [14] semi-supervised 91.3\\nMcClosky et al. (2006) [26] semi-supervised 92.1\\nVinyals & Kaiser el al. (2014) [37] semi-supervised 92.1\\nTransformer (4 layers) semi-supervised 92.7\\nLuong et al. (2015) [23] multi-task 93.0\\nDyer et al. (2016) [8] generative 93.3\\nincreased the maximum output length to input length + 300. We used a beam size of 21 and Î± = 0.3\\nfor both WSJ only and the semi-supervised setting.\\nOur results in Table 4 show that despite the lack of task-specific tuning our model performs sur-\\nprisingly well, yielding better results than all previously reported models with the exception of the\\nRecurrent Neural Network Grammar [8].\\nIn contrast to RNN sequence-to-sequence models [37], the Transformer outperforms the Berkeley-\\nParser [29] even when training only on the WSJ training set of 40K sentences.\\n7 Conclusion\\nIn this work, we presented the Transformer, the first sequence transduction model based entirely on\\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\\nmulti-headed self-attention.\\nFor translation tasks, the Transformer can be trained significantly faster than architectures based\\non recurrent or convolutional layers. On both WMT 2014 English-to-German and WMT 2014\\nEnglish-to-French translation tasks, we achieve a new state of the art. In the former task our best\\nmodel outperforms even all previously reported ensembles.\\nWe are excited about the future of attention-based models and plan to apply them to other tasks. We\\nplan to extend the Transformer to problems involving input and output modalities other than text and\\nto investigate local, restricted attention mechanisms to efficiently handle large inputs and outputs\\nsuch as images, audio and video. Making generation less sequential is another research goals of ours.\\nThe code we used to train and evaluate our models is available at https://github.com/\\ntensorflow/tensor2tensor.\\nAcknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\\ncomments, corrections and inspiration.\\nReferences\\n[1] Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. Layer normalization. arXiv preprint\\narXiv:1607.06450, 2016.\\n[2] Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. Neural machine translation by jointly\\nlearning to align and translate. CoRR, abs/1409.0473, 2014.\\n[3] Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V . Le. Massive exploration of neural\\nmachine translation architectures. CoRR, abs/1703.03906, 2017.\\n[4] Jianpeng Cheng, Li Dong, and Mirella Lapata. Long short-term memory-networks for machine\\nreading. arXiv preprint arXiv:1601.06733, 2016.\\n10\\n\\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\\nModel\\nBLEU Training Cost (FLOPs)\\nEN-DE EN-FR EN-DE EN-FR\\nByteNet [18] 23.75\\nDeep-Att + PosUnk [39] 39.2 1.0 Â· 1020\\nGNMT + RL [38] 24.6 39.92 2.3 Â· 1019 1.4 Â· 1020\\nConvS2S [9] 25.16 40.46 9.6 Â· 1018 1.5 Â· 1020\\nMoE [32] 26.03 40.56 2.0 Â· 1019 1.2 Â· 1020\\nDeep-Att + PosUnk Ensemble [39] 40.4 8.0 Â· 1020\\nGNMT + RL Ensemble [38] 26.30 41.16 1.8 Â· 1020 1.1 Â· 1021\\nConvS2S Ensemble [9] 26.36 41.29 7.7 Â· 1019 1.2 Â· 1021\\nTransformer (base model) 27.3 38.1 3.3 Â· 1018\\nTransformer (big) 28.4 41.8 2.3 Â· 1019\\nResidual Dropout We apply dropout [33] to the output of each sub-layer, before it is added to the\\nsub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the\\npositional encodings in both the encoder and decoder stacks. For the base model, we use a rate of\\nPdrop = 0.1.\\nLabel Smoothing During training, we employed label smoothing of value Ïµls = 0.1 [36]. This\\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\\n6 Results\\n6.1 Machine Translation\\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\\nBLEU, establishing a new state-of-the-art BLEU score of 28.4. The configuration of this model is\\nlisted in the bottom line of Table 3. Training took 3.5 days on 8 P100 GPUs. Even our base model\\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\\nthe competitive models.\\nOn the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\\noutperforming all of the previously published single models, at less than 1/4 the training cost of the\\nprevious state-of-the-art model. The Transformer (big) model trained for English-to-French used\\ndropout rate Pdrop = 0.1, instead of 0.3.\\nFor the base models, we used a single model obtained by averaging the last 5 checkpoints, which\\nwere written at 10-minute intervals. For the big models, we averaged the last 20 checkpoints. We\\nused beam search with a beam size of 4 and length penalty Î± = 0.6 [38]. These hyperparameters\\nwere chosen after experimentation on the development set. We set the maximum output length during\\ninference to input length + 50, but terminate early when possible [38].\\nTable 2 summarizes our results and compares our translation quality and training costs to other model\\narchitectures from the literature. We estimate the number of floating point operations used to train a\\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\\nsingle-precision floating-point capacity of each GPU 5.\\n6.2 Model Variations\\nTo evaluate the importance of different components of the Transformer, we varied our base model\\nin different ways, measuring the change in performance on English-to-German translation on the\\n5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\\n8\\n\\noutput values. These are concatenated and once again projected, resulting in the final values, as\\ndepicted in Figure 2.\\nMulti-head attention allows the model to jointly attend to information from different representation\\nsubspaces at different positions. With a single attention head, averaging inhibits this.\\nMultiHead(Q, K, V) = Concat(head1, ...,headh)WO\\nwhere headi = Attention(QWQ\\ni , KWK\\ni , V WV\\ni )\\nWhere the projections are parameter matricesWQ\\ni â RdmodelÃdk , WK\\ni â RdmodelÃdk , WV\\ni â RdmodelÃdv\\nand WO â RhdvÃdmodel .\\nIn this work we employ h = 8 parallel attention layers, or heads. For each of these we use\\ndk = dv = dmodel/h = 64. Due to the reduced dimension of each head, the total computational cost\\nis similar to that of single-head attention with full dimensionality.\\n3.2.3 Applications of Attention in our Model\\nThe Transformer uses multi-head attention in three different ways:\\nâ¢ In ""encoder-decoder attention"" layers, the queries come from the previous decoder layer,\\nand the memory keys and values come from the output of the encoder. This allows every\\nposition in the decoder to attend over all positions in the input sequence. This mimics the\\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\\n[38, 2, 9].\\nâ¢ The encoder contains self-attention layers. In a self-attention layer all of the keys, values\\nand queries come from the same place, in this case, the output of the previous layer in the\\nencoder. Each position in the encoder can attend to all positions in the previous layer of the\\nencoder.\\nâ¢ Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\\nall positions in the decoder up to and including that position. We need to prevent leftward\\ninformation flow in the decoder to preserve the auto-regressive property. We implement this\\ninside of scaled dot-product attention by masking out (setting to ââ) all values in the input\\nof the softmax which correspond to illegal connections. See Figure 2.\\n3.3 Position-wise Feed-Forward Networks\\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\\nconnected feed-forward network, which is applied to each position separately and identically. This\\nconsists of two linear transformations with a ReLU activation in between.\\nFFN(x) = max(0, xW1 + b1)W2 + b2 (2)\\nWhile the linear transformations are the same across different positions, they use different parameters\\nfrom layer to layer. Another way of describing this is as two convolutions with kernel size 1.\\nThe dimensionality of input and output is dmodel = 512, and the inner-layer has dimensionality\\ndff = 2048.\\n3.4 Embeddings and Softmax\\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\\ntokens and output tokens to vectors of dimension dmodel. We also use the usual learned linear transfor-\\nmation and softmax function to convert the decoder output to predicted next-token probabilities. In\\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\\nlinear transformation, similar to [30]. In the embedding layers, we multiply those weights by âdmodel.\\n5\\n\\nFigure 1: The Transformer - model architecture.\\nThe Transformer follows this overall architecture using stacked self-attention and point-wise, fully\\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\\nrespectively.\\n3.1 Encoder and Decoder Stacks\\nEncoder: The encoder is composed of a stack of N = 6 identical layers. Each layer has two\\nsub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, position-\\nwise fully connected feed-forward network. We employ a residual connection [11] around each of\\nthe two sub-layers, followed by layer normalization [ 1]. That is, the output of each sub-layer is\\nLayerNorm(x + Sublayer(x)), where Sublayer(x) is the function implemented by the sub-layer\\nitself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding\\nlayers, produce outputs of dimension dmodel = 512.\\nDecoder: The decoder is also composed of a stack of N = 6identical layers. In addition to the two\\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\\nattention over the output of the encoder stack. Similar to the encoder, we employ residual connections\\naround each of the sub-layers, followed by layer normalization. We also modify the self-attention\\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions. This\\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\\npredictions for position i can depend only on the known outputs at positions less than i.\\n3.2 Attention\\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\\nwhere the query, keys, values, and output are all vectors. The output is computed as a weighted sum\\n3\'}', 'ai.observability.call.kwargs.config': ""{'tags': [], 'metadata': {}, 'callbacks': <langchain_core.callbacks.manager.CallbackManager object at 0x36306ef90>, 'recursion_limit': 25, 'configurable': {}}""}",EventRecordType.SPAN,"{'telemetry.sdk.language': 'python', 'telemetry.sdk.name': 'opentelemetry', 'telemetry.sdk.version': '1.28.2', 'service.name': 'trulens'}",2025-01-31 23:38:57.638309,2025-01-31 23:38:57.638856,"{'trace_id': '252496542679367017208368062231198061843', 'parent_id': '12617144269860690225', 'span_id': '10229560595490986656'}"
8,"{'name': 'langchain_core.language_models.llms.BaseLLM.invoke', 'kind': 1, 'parent_span_id': '12617144269860690225', 'status': 'STATUS_CODE_UNSET'}",14975582917996851138,"{'name': 'langchain_core.language_models.llms.BaseLLM.invoke', 'ai.observability.span_type': 'unknown', 'ai.observability.domain': 'module', 'ai.observability.app_name': 'Simple RAG', 'ai.observability.app_version': 'v1', 'ai.observability.record_id': 'c4ea2874-9f60-4078-8819-edcd0dbf2fd0', 'ai.observability.run_name': 'test run', 'ai.observability.input_id': '42', 'ai.observability.call.return': 'This is a mocked response for prompt 0.', 'ai.observability.call.stack': '  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/bin/pytest"", line 8, in <module>\n    sys.exit(console_main())\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/config/__init__.py"", line 201, in console_main\n    code = main()\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/config/__init__.py"", line 175, in main\n    ret: ExitCode | int = config.hook.pytest_cmdline_main(config=config)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_hooks.py"", line 513, in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_manager.py"", line 120, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_callers.py"", line 103, in _multicall\n    res = hook_impl.function(*args)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/main.py"", line 330, in pytest_cmdline_main\n    return wrap_session(config, _main)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/main.py"", line 283, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/main.py"", line 337, in _main\n    config.hook.pytest_runtestloop(session=session)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_hooks.py"", line 513, in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_manager.py"", line 120, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_callers.py"", line 103, in _multicall\n    res = hook_impl.function(*args)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/main.py"", line 362, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_hooks.py"", line 513, in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_manager.py"", line 120, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_callers.py"", line 103, in _multicall\n    res = hook_impl.function(*args)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/runner.py"", line 113, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/runner.py"", line 132, in runtestprotocol\n    reports.append(call_and_report(item, ""call"", log))\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/runner.py"", line 241, in call_and_report\n    call = CallInfo.from_call(\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/runner.py"", line 341, in from_call\n    result: TResult | None = func()\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/runner.py"", line 242, in <lambda>\n    lambda: runtest_hook(item=item, **kwds), when=when, reraise=reraise\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_hooks.py"", line 513, in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_manager.py"", line 120, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_callers.py"", line 103, in _multicall\n    res = hook_impl.function(*args)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/runner.py"", line 174, in pytest_runtest_call\n    item.runtest()\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/unittest.py"", line 351, in runtest\n    testcase(result=self)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/unittest/case.py"", line 678, in __call__\n    return self.run(*args, **kwds)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/unittest/case.py"", line 623, in run\n    self._callTestMethod(testMethod)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/unittest/case.py"", line 579, in _callTestMethod\n    if method() is not None:\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/tests/unit/test_otel_tru_chain.py"", line 75, in test_smoke\n    rag_chain.invoke(""What is multi-headed attention?"")\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 173, in sync_wrapper\n    if next(ret) == ""is_not_generator"":\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 193, in convert_to_generator\n    result = func(*args, **kwargs)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/langchain_core/runnables/base.py"", line 2879, in invoke\n    input = context.run(step.invoke, input, config)\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 178, in sync_wrapper\n    next(ret)\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 212, in convert_to_generator\n    _set_span_attributes(\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 109, in _set_span_attributes\n    set_function_call_attributes(span, ret, func_exception, all_kwargs)\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/experimental/otel_tracing/core/span.py"", line 152, in set_function_call_attributes\n    span, SpanAttributes.CALL.STACK, ""\\n"".join(traceback.format_stack())\n', 'ai.observability.call.kwargs.input': 'messages=[HumanMessage(content=\'You are an assistant for question-answering tasks. Use the following pieces of retrieved context to answer the question. If you don\\\'t know the answer, just say that you don\\\'t know. Use three sentences maximum and keep the answer concise.\\nQuestion: What is multi-headed attention? \\nContext: Table 4: The Transformer generalizes well to English constituency parsing (Results are on Section 23\\nof WSJ)\\nParser Training WSJ 23 F1\\nVinyals & Kaiser el al. (2014) [37] WSJ only, discriminative 88.3\\nPetrov et al. (2006) [29] WSJ only, discriminative 90.4\\nZhu et al. (2013) [40] WSJ only, discriminative 90.4\\nDyer et al. (2016) [8] WSJ only, discriminative 91.7\\nTransformer (4 layers) WSJ only, discriminative 91.3\\nZhu et al. (2013) [40] semi-supervised 91.3\\nHuang & Harper (2009) [14] semi-supervised 91.3\\nMcClosky et al. (2006) [26] semi-supervised 92.1\\nVinyals & Kaiser el al. (2014) [37] semi-supervised 92.1\\nTransformer (4 layers) semi-supervised 92.7\\nLuong et al. (2015) [23] multi-task 93.0\\nDyer et al. (2016) [8] generative 93.3\\nincreased the maximum output length to input length + 300. We used a beam size of 21 and Î± = 0.3\\nfor both WSJ only and the semi-supervised setting.\\nOur results in Table 4 show that despite the lack of task-specific tuning our model performs sur-\\nprisingly well, yielding better results than all previously reported models with the exception of the\\nRecurrent Neural Network Grammar [8].\\nIn contrast to RNN sequence-to-sequence models [37], the Transformer outperforms the Berkeley-\\nParser [29] even when training only on the WSJ training set of 40K sentences.\\n7 Conclusion\\nIn this work, we presented the Transformer, the first sequence transduction model based entirely on\\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\\nmulti-headed self-attention.\\nFor translation tasks, the Transformer can be trained significantly faster than architectures based\\non recurrent or convolutional layers. On both WMT 2014 English-to-German and WMT 2014\\nEnglish-to-French translation tasks, we achieve a new state of the art. In the former task our best\\nmodel outperforms even all previously reported ensembles.\\nWe are excited about the future of attention-based models and plan to apply them to other tasks. We\\nplan to extend the Transformer to problems involving input and output modalities other than text and\\nto investigate local, restricted attention mechanisms to efficiently handle large inputs and outputs\\nsuch as images, audio and video. Making generation less sequential is another research goals of ours.\\nThe code we used to train and evaluate our models is available at https://github.com/\\ntensorflow/tensor2tensor.\\nAcknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\\ncomments, corrections and inspiration.\\nReferences\\n[1] Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. Layer normalization. arXiv preprint\\narXiv:1607.06450, 2016.\\n[2] Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. Neural machine translation by jointly\\nlearning to align and translate. CoRR, abs/1409.0473, 2014.\\n[3] Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V . Le. Massive exploration of neural\\nmachine translation architectures. CoRR, abs/1703.03906, 2017.\\n[4] Jianpeng Cheng, Li Dong, and Mirella Lapata. Long short-term memory-networks for machine\\nreading. arXiv preprint arXiv:1601.06733, 2016.\\n10\\n\\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\\nModel\\nBLEU Training Cost (FLOPs)\\nEN-DE EN-FR EN-DE EN-FR\\nByteNet [18] 23.75\\nDeep-Att + PosUnk [39] 39.2 1.0 Â· 1020\\nGNMT + RL [38] 24.6 39.92 2.3 Â· 1019 1.4 Â· 1020\\nConvS2S [9] 25.16 40.46 9.6 Â· 1018 1.5 Â· 1020\\nMoE [32] 26.03 40.56 2.0 Â· 1019 1.2 Â· 1020\\nDeep-Att + PosUnk Ensemble [39] 40.4 8.0 Â· 1020\\nGNMT + RL Ensemble [38] 26.30 41.16 1.8 Â· 1020 1.1 Â· 1021\\nConvS2S Ensemble [9] 26.36 41.29 7.7 Â· 1019 1.2 Â· 1021\\nTransformer (base model) 27.3 38.1 3.3 Â· 1018\\nTransformer (big) 28.4 41.8 2.3 Â· 1019\\nResidual Dropout We apply dropout [33] to the output of each sub-layer, before it is added to the\\nsub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the\\npositional encodings in both the encoder and decoder stacks. For the base model, we use a rate of\\nPdrop = 0.1.\\nLabel Smoothing During training, we employed label smoothing of value Ïµls = 0.1 [36]. This\\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\\n6 Results\\n6.1 Machine Translation\\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\\nBLEU, establishing a new state-of-the-art BLEU score of 28.4. The configuration of this model is\\nlisted in the bottom line of Table 3. Training took 3.5 days on 8 P100 GPUs. Even our base model\\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\\nthe competitive models.\\nOn the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\\noutperforming all of the previously published single models, at less than 1/4 the training cost of the\\nprevious state-of-the-art model. The Transformer (big) model trained for English-to-French used\\ndropout rate Pdrop = 0.1, instead of 0.3.\\nFor the base models, we used a single model obtained by averaging the last 5 checkpoints, which\\nwere written at 10-minute intervals. For the big models, we averaged the last 20 checkpoints. We\\nused beam search with a beam size of 4 and length penalty Î± = 0.6 [38]. These hyperparameters\\nwere chosen after experimentation on the development set. We set the maximum output length during\\ninference to input length + 50, but terminate early when possible [38].\\nTable 2 summarizes our results and compares our translation quality and training costs to other model\\narchitectures from the literature. We estimate the number of floating point operations used to train a\\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\\nsingle-precision floating-point capacity of each GPU 5.\\n6.2 Model Variations\\nTo evaluate the importance of different components of the Transformer, we varied our base model\\nin different ways, measuring the change in performance on English-to-German translation on the\\n5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\\n8\\n\\noutput values. These are concatenated and once again projected, resulting in the final values, as\\ndepicted in Figure 2.\\nMulti-head attention allows the model to jointly attend to information from different representation\\nsubspaces at different positions. With a single attention head, averaging inhibits this.\\nMultiHead(Q, K, V) = Concat(head1, ...,headh)WO\\nwhere headi = Attention(QWQ\\ni , KWK\\ni , V WV\\ni )\\nWhere the projections are parameter matricesWQ\\ni â RdmodelÃdk , WK\\ni â RdmodelÃdk , WV\\ni â RdmodelÃdv\\nand WO â RhdvÃdmodel .\\nIn this work we employ h = 8 parallel attention layers, or heads. For each of these we use\\ndk = dv = dmodel/h = 64. Due to the reduced dimension of each head, the total computational cost\\nis similar to that of single-head attention with full dimensionality.\\n3.2.3 Applications of Attention in our Model\\nThe Transformer uses multi-head attention in three different ways:\\nâ¢ In ""encoder-decoder attention"" layers, the queries come from the previous decoder layer,\\nand the memory keys and values come from the output of the encoder. This allows every\\nposition in the decoder to attend over all positions in the input sequence. This mimics the\\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\\n[38, 2, 9].\\nâ¢ The encoder contains self-attention layers. In a self-attention layer all of the keys, values\\nand queries come from the same place, in this case, the output of the previous layer in the\\nencoder. Each position in the encoder can attend to all positions in the previous layer of the\\nencoder.\\nâ¢ Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\\nall positions in the decoder up to and including that position. We need to prevent leftward\\ninformation flow in the decoder to preserve the auto-regressive property. We implement this\\ninside of scaled dot-product attention by masking out (setting to ââ) all values in the input\\nof the softmax which correspond to illegal connections. See Figure 2.\\n3.3 Position-wise Feed-Forward Networks\\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\\nconnected feed-forward network, which is applied to each position separately and identically. This\\nconsists of two linear transformations with a ReLU activation in between.\\nFFN(x) = max(0, xW1 + b1)W2 + b2 (2)\\nWhile the linear transformations are the same across different positions, they use different parameters\\nfrom layer to layer. Another way of describing this is as two convolutions with kernel size 1.\\nThe dimensionality of input and output is dmodel = 512, and the inner-layer has dimensionality\\ndff = 2048.\\n3.4 Embeddings and Softmax\\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\\ntokens and output tokens to vectors of dimension dmodel. We also use the usual learned linear transfor-\\nmation and softmax function to convert the decoder output to predicted next-token probabilities. In\\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\\nlinear transformation, similar to [30]. In the embedding layers, we multiply those weights by âdmodel.\\n5\\n\\nFigure 1: The Transformer - model architecture.\\nThe Transformer follows this overall architecture using stacked self-attention and point-wise, fully\\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\\nrespectively.\\n3.1 Encoder and Decoder Stacks\\nEncoder: The encoder is composed of a stack of N = 6 identical layers. Each layer has two\\nsub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, position-\\nwise fully connected feed-forward network. We employ a residual connection [11] around each of\\nthe two sub-layers, followed by layer normalization [ 1]. That is, the output of each sub-layer is\\nLayerNorm(x + Sublayer(x)), where Sublayer(x) is the function implemented by the sub-layer\\nitself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding\\nlayers, produce outputs of dimension dmodel = 512.\\nDecoder: The decoder is also composed of a stack of N = 6identical layers. In addition to the two\\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\\nattention over the output of the encoder stack. Similar to the encoder, we employ residual connections\\naround each of the sub-layers, followed by layer normalization. We also modify the self-attention\\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions. This\\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\\npredictions for position i can depend only on the known outputs at positions less than i.\\n3.2 Attention\\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\\nwhere the query, keys, values, and output are all vectors. The output is computed as a weighted sum\\n3 \\nAnswer:\')]', 'ai.observability.call.kwargs.config': ""{'tags': [], 'metadata': {}, 'callbacks': <langchain_core.callbacks.manager.CallbackManager object at 0x36744c6d0>, 'recursion_limit': 25, 'configurable': {}}""}",EventRecordType.SPAN,"{'telemetry.sdk.language': 'python', 'telemetry.sdk.name': 'opentelemetry', 'telemetry.sdk.version': '1.28.2', 'service.name': 'trulens'}",2025-01-31 23:38:57.638906,2025-01-31 23:38:57.639358,"{'trace_id': '252496542679367017208368062231198061843', 'parent_id': '12617144269860690225', 'span_id': '14975582917996851138'}"
9,"{'name': 'langchain_core.output_parsers.base.BaseOutputParser.invoke', 'kind': 1, 'parent_span_id': '12617144269860690225', 'status': 'STATUS_CODE_UNSET'}",17210846014531676944,"{'name': 'langchain_core.output_parsers.base.BaseOutputParser.invoke', 'ai.observability.span_type': 'unknown', 'ai.observability.domain': 'module', 'ai.observability.app_name': 'Simple RAG', 'ai.observability.app_version': 'v1', 'ai.observability.record_id': 'c4ea2874-9f60-4078-8819-edcd0dbf2fd0', 'ai.observability.run_name': 'test run', 'ai.observability.input_id': '42', 'ai.observability.call.return': 'This is a mocked response for prompt 0.', 'ai.observability.call.stack': '  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/bin/pytest"", line 8, in <module>\n    sys.exit(console_main())\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/config/__init__.py"", line 201, in console_main\n    code = main()\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/config/__init__.py"", line 175, in main\n    ret: ExitCode | int = config.hook.pytest_cmdline_main(config=config)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_hooks.py"", line 513, in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_manager.py"", line 120, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_callers.py"", line 103, in _multicall\n    res = hook_impl.function(*args)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/main.py"", line 330, in pytest_cmdline_main\n    return wrap_session(config, _main)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/main.py"", line 283, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/main.py"", line 337, in _main\n    config.hook.pytest_runtestloop(session=session)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_hooks.py"", line 513, in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_manager.py"", line 120, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_callers.py"", line 103, in _multicall\n    res = hook_impl.function(*args)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/main.py"", line 362, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_hooks.py"", line 513, in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_manager.py"", line 120, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_callers.py"", line 103, in _multicall\n    res = hook_impl.function(*args)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/runner.py"", line 113, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/runner.py"", line 132, in runtestprotocol\n    reports.append(call_and_report(item, ""call"", log))\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/runner.py"", line 241, in call_and_report\n    call = CallInfo.from_call(\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/runner.py"", line 341, in from_call\n    result: TResult | None = func()\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/runner.py"", line 242, in <lambda>\n    lambda: runtest_hook(item=item, **kwds), when=when, reraise=reraise\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_hooks.py"", line 513, in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_manager.py"", line 120, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/pluggy/_callers.py"", line 103, in _multicall\n    res = hook_impl.function(*args)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/runner.py"", line 174, in pytest_runtest_call\n    item.runtest()\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/_pytest/unittest.py"", line 351, in runtest\n    testcase(result=self)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/unittest/case.py"", line 678, in __call__\n    return self.run(*args, **kwds)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/unittest/case.py"", line 623, in run\n    self._callTestMethod(testMethod)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/unittest/case.py"", line 579, in _callTestMethod\n    if method() is not None:\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/tests/unit/test_otel_tru_chain.py"", line 75, in test_smoke\n    rag_chain.invoke(""What is multi-headed attention?"")\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 173, in sync_wrapper\n    if next(ret) == ""is_not_generator"":\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 193, in convert_to_generator\n    result = func(*args, **kwargs)\n\n  File ""/Users/dkurokawa/miniconda3/envs/trulens_3_11/lib/python3.11/site-packages/langchain_core/runnables/base.py"", line 2879, in invoke\n    input = context.run(step.invoke, input, config)\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 178, in sync_wrapper\n    next(ret)\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 212, in convert_to_generator\n    _set_span_attributes(\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/core/otel/instrument.py"", line 109, in _set_span_attributes\n    set_function_call_attributes(span, ret, func_exception, all_kwargs)\n\n  File ""/Users/dkurokawa/Work/code/trulens/trulens/src/core/trulens/experimental/otel_tracing/core/span.py"", line 152, in set_function_call_attributes\n    span, SpanAttributes.CALL.STACK, ""\\n"".join(traceback.format_stack())\n', 'ai.observability.call.kwargs.input': 'This is a mocked response for prompt 0.', 'ai.observability.call.kwargs.config': ""{'tags': [], 'metadata': {}, 'callbacks': <langchain_core.callbacks.manager.CallbackManager object at 0x36306ef90>, 'recursion_limit': 25, 'configurable': {}}""}",EventRecordType.SPAN,"{'telemetry.sdk.language': 'python', 'telemetry.sdk.name': 'opentelemetry', 'telemetry.sdk.version': '1.28.2', 'service.name': 'trulens'}",2025-01-31 23:38:57.639407,2025-01-31 23:38:57.639620,"{'trace_id': '252496542679367017208368062231198061843', 'parent_id': '12617144269860690225', 'span_id': '17210846014531676944'}"
