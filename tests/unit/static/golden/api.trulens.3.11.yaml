trulens:
  __class__: builtins.module
  highs: {}
  lows: {}
trulens.benchmark:
  __class__: builtins.module
  __version__: 1.0.1a1
  highs: {}
  lows:
    __path__: builtins.list
    __version__: builtins.str
trulens.benchmark.benchmark_frameworks:
  __class__: builtins.module
  highs: {}
  lows:
    __path__: builtins.list
trulens.benchmark.benchmark_frameworks.tru_benchmark_experiment:
  __class__: builtins.module
  highs: {}
  lows:
    BenchmarkParams: pydantic._internal._model_construction.ModelMetaclass
    TruBenchmarkExperiment: builtins.type
    create_benchmark_experiment_app: builtins.staticmethod
trulens.benchmark.benchmark_frameworks.tru_benchmark_experiment.BenchmarkParams:
  __bases__:
  - pydantic.main.BaseModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    criteria: typing.Optional[builtins.str, builtins.NoneType]
    output_space: typing.Optional[builtins.str, builtins.NoneType]
    temperature: builtins.float
trulens.benchmark.benchmark_frameworks.tru_benchmark_experiment.TruBenchmarkExperiment:
  __bases__:
  - builtins.object
  __class__: builtins.type
  attributes:
    run_score_generation_on_single_row: builtins.function
trulens.benchmark.test_cases:
  __class__: builtins.module
  highs: {}
  lows:
    answer_relevance_golden_set: builtins.list
    calculate_expected_score: builtins.function
    context_relevance_golden_set: builtins.list
    generate_meetingbank_comprehensiveness_benchmark: builtins.function
    generate_ms_marco_context_relevance_benchmark: builtins.function
    generate_summeval_groundedness_golden_set: builtins.function
trulens.core:
  __class__: builtins.module
  __version__: 1.0.1a2
  highs:
    Feedback: pydantic._internal._model_construction.ModelMetaclass
    FeedbackMode: enum.EnumType
    Provider: pydantic._internal._model_construction.ModelMetaclass
    Select: builtins.type
    SnowflakeFeedback: pydantic._internal._model_construction.ModelMetaclass
    Tru: builtins.function
    TruBasicApp: pydantic._internal._model_construction.ModelMetaclass
    TruCustomApp: pydantic._internal._model_construction.ModelMetaclass
    TruSession: pydantic._internal._model_construction.ModelMetaclass
    TruVirtual: pydantic._internal._model_construction.ModelMetaclass
  lows:
    __all__: builtins.list
    __path__: builtins.list
    __version__: builtins.str
trulens.core.app:
  __class__: builtins.module
  highs:
    App: pydantic._internal._model_construction.ModelMetaclass
    TruBasicApp: pydantic._internal._model_construction.ModelMetaclass
    TruCustomApp: pydantic._internal._model_construction.ModelMetaclass
    TruVirtual: pydantic._internal._model_construction.ModelMetaclass
    TruWrapperApp: builtins.type
    VirtualApp: builtins.type
  lows:
    __all__: builtins.list
    __path__: builtins.list
trulens.core.app.base:
  __class__: builtins.module
  highs: {}
  lows:
    A: typing.TypeVar
    ATTRIBUTE_ERROR_MESSAGE: builtins.str
    Agent: trulens.core.app.base.ComponentViewMeta
    App: pydantic._internal._model_construction.ModelMetaclass
    CLASS_INFO: builtins.str
    ComponentView: trulens.core.app.base.ComponentViewMeta
    ComponentViewMeta: builtins.type
    CustomComponent: trulens.core.app.base.ComponentViewMeta
    JSON_BASES: builtins.tuple
    LLM: trulens.core.app.base.ComponentViewMeta
    Memory: trulens.core.app.base.ComponentViewMeta
    Other: trulens.core.app.base.ComponentViewMeta
    Prompt: trulens.core.app.base.ComponentViewMeta
    RecordingContext: builtins.type
    Tool: trulens.core.app.base.ComponentViewMeta
    TrulensComponent: trulens.core.app.base.ComponentViewMeta
    instrumented_component_views: builtins.function
trulens.core.app.base.Agent:
  __bases__:
  - trulens.core.app.base.ComponentView
  __class__: trulens.core.app.base.ComponentViewMeta
  attributes:
    agent_name: builtins.property
trulens.core.app.base.App:
  __bases__:
  - trulens.core.schema.app.AppDefinition
  - trulens.core.instruments.WithInstrumentCallbacks
  - collections.abc.Hashable
  - typing.Generic
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    app: typing.Any
    app_extra_json: typing.Union[builtins.str, builtins.int, builtins.float, builtins.bytes,
      builtins.NoneType, typing.Sequence[typing.Any], typing.Dict[builtins.str, typing.Any]]
    app_id: builtins.str
    app_name: builtins.str
    app_version: builtins.str
    awith_: builtins.function
    awith_record: builtins.function
    connector: trulens.core.database.connector.base.DBConnector
    dummy_record: builtins.function
    feedback_definitions: typing.Sequence[builtins.str]
    feedback_mode: trulens.core.schema.feedback.FeedbackMode
    feedbacks: typing.List[trulens.core.feedback.feedback.Feedback]
    format_instrumented_methods: builtins.function
    initial_app_loader_dump: typing.Optional[trulens.core.utils.serial.SerialBytes,
      builtins.NoneType]
    instrument: typing.Optional[trulens.core.instruments.Instrument, builtins.NoneType]
    instrumented: builtins.function
    instrumented_methods: typing.Dict[builtins.int, typing.Dict[typing.Callable, trulens.core.utils.serial.Lens]]
    main_acall: builtins.function
    main_call: builtins.function
    main_input: builtins.function
    main_output: builtins.function
    manage_pending_feedback_results_thread: typing.Optional[trulens.core.utils.threading.Thread,
      builtins.NoneType]
    metadata: typing.Dict
    print_instrumented: builtins.function
    print_instrumented_components: builtins.function
    print_instrumented_methods: builtins.function
    record_ingest_mode: trulens.core.schema.app.RecordIngestMode
    recording_contexts: _contextvars.ContextVar[trulens.core.app.base.RecordingContext]
    records_with_pending_feedback_results: trulens.core.utils.containers.BlockingSet[trulens.core.schema.record.Record]
    root_class: trulens.core.utils.pyschema.Class
    select_context: builtins.classmethod
    selector_check_warning: builtins.bool
    selector_nocheck: builtins.bool
    tags: builtins.str
    tru_class_info: trulens.core.utils.pyschema.Class
    wait_for_feedback_results: builtins.function
    with_: builtins.function
    with_record: builtins.function
trulens.core.app.base.ComponentView:
  __bases__:
  - abc.ABC
  __class__: trulens.core.app.base.ComponentViewMeta
  attributes:
    class_is: builtins.staticmethod
    innermost_base: builtins.staticmethod
    of_json: builtins.classmethod
    unsorted_parameters: builtins.function
trulens.core.app.base.ComponentViewMeta:
  __bases__:
  - abc.ABCMeta
  __class__: builtins.type
  attributes: {}
trulens.core.app.base.CustomComponent:
  __bases__:
  - trulens.core.app.base.ComponentView
  __class__: trulens.core.app.base.ComponentViewMeta
  attributes:
    COMPONENT_VIEWS: builtins.list
    Custom: trulens.core.app.base.ComponentViewMeta
    component_of_json: builtins.staticmethod
    constructor_of_class: builtins.staticmethod
trulens.core.app.base.LLM:
  __bases__:
  - trulens.core.app.base.ComponentView
  __class__: trulens.core.app.base.ComponentViewMeta
  attributes:
    model_name: builtins.property
trulens.core.app.base.Memory:
  __bases__:
  - trulens.core.app.base.ComponentView
  __class__: trulens.core.app.base.ComponentViewMeta
  attributes: {}
trulens.core.app.base.Other:
  __bases__:
  - trulens.core.app.base.ComponentView
  __class__: trulens.core.app.base.ComponentViewMeta
  attributes: {}
trulens.core.app.base.Prompt:
  __bases__:
  - trulens.core.app.base.ComponentView
  __class__: trulens.core.app.base.ComponentViewMeta
  attributes:
    template: builtins.property
trulens.core.app.base.RecordingContext:
  __bases__:
  - builtins.object
  __class__: builtins.type
  attributes:
    add_call: builtins.function
    finish_record: builtins.function
    get: builtins.function
trulens.core.app.base.Tool:
  __bases__:
  - trulens.core.app.base.ComponentView
  __class__: trulens.core.app.base.ComponentViewMeta
  attributes:
    tool_name: builtins.property
trulens.core.app.base.TrulensComponent:
  __bases__:
  - trulens.core.app.base.ComponentView
  __class__: trulens.core.app.base.ComponentViewMeta
  attributes: {}
trulens.core.app.basic:
  __class__: builtins.module
  highs: {}
  lows:
    TruBasicApp: pydantic._internal._model_construction.ModelMetaclass
    TruBasicCallableInstrument: builtins.type
    TruWrapperApp: builtins.type
trulens.core.app.basic.TruBasicApp:
  __bases__:
  - trulens.core.app.base.App
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    app: trulens.core.app.basic.TruWrapperApp
    app_extra_json: typing.Union[builtins.str, builtins.int, builtins.float, builtins.bytes,
      builtins.NoneType, typing.Sequence[typing.Any], typing.Dict[builtins.str, typing.Any]]
    app_id: builtins.str
    app_name: builtins.str
    app_version: builtins.str
    call_with_record: builtins.function
    connector: trulens.core.database.connector.base.DBConnector
    feedback_definitions: typing.Sequence[builtins.str]
    feedback_mode: trulens.core.schema.feedback.FeedbackMode
    feedbacks: typing.List[trulens.core.feedback.feedback.Feedback]
    initial_app_loader_dump: typing.Optional[trulens.core.utils.serial.SerialBytes,
      builtins.NoneType]
    instrument: typing.Optional[trulens.core.instruments.Instrument, builtins.NoneType]
    instrumented_methods: typing.Dict[builtins.int, typing.Dict[typing.Callable, trulens.core.utils.serial.Lens]]
    manage_pending_feedback_results_thread: typing.Optional[trulens.core.utils.threading.Thread,
      builtins.NoneType]
    metadata: typing.Dict
    record_ingest_mode: trulens.core.schema.app.RecordIngestMode
    recording_contexts: _contextvars.ContextVar[trulens.core.app.base.RecordingContext]
    records_with_pending_feedback_results: trulens.core.utils.containers.BlockingSet[trulens.core.schema.record.Record]
    root_callable: pydantic.fields.FieldInfo
    root_class: trulens.core.utils.pyschema.Class
    selector_check_warning: builtins.bool
    selector_nocheck: builtins.bool
    tags: builtins.str
    tru_class_info: trulens.core.utils.pyschema.Class
trulens.core.app.basic.TruBasicCallableInstrument:
  __bases__:
  - trulens.core.instruments.Instrument
  __class__: builtins.type
  attributes: {}
trulens.core.app.basic.TruWrapperApp:
  __bases__:
  - builtins.object
  __class__: builtins.type
  attributes: {}
trulens.core.app.custom:
  __class__: builtins.module
  highs: {}
  lows:
    PLACEHOLDER: builtins.str
    TruCustomApp: pydantic._internal._model_construction.ModelMetaclass
    UNICODE_CHECK: builtins.str
    instrument: builtins.type
trulens.core.app.custom.TruCustomApp:
  __bases__:
  - trulens.core.app.base.App
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    app: typing.Any
    app_extra_json: typing.Union[builtins.str, builtins.int, builtins.float, builtins.bytes,
      builtins.NoneType, typing.Sequence[typing.Any], typing.Dict[builtins.str, typing.Any]]
    app_id: builtins.str
    app_name: builtins.str
    app_version: builtins.str
    connector: trulens.core.database.connector.base.DBConnector
    feedback_definitions: typing.Sequence[builtins.str]
    feedback_mode: trulens.core.schema.feedback.FeedbackMode
    feedbacks: typing.List[trulens.core.feedback.feedback.Feedback]
    functions_to_instrument: builtins.set
    initial_app_loader_dump: typing.Optional[trulens.core.utils.serial.SerialBytes,
      builtins.NoneType]
    instrument: typing.Optional[trulens.core.instruments.Instrument, builtins.NoneType]
    instrumented_methods: typing.Dict[builtins.int, typing.Dict[typing.Callable, trulens.core.utils.serial.Lens]]
    main_method: typing.Optional[trulens.core.utils.pyschema.Function, builtins.NoneType]
    main_method_loaded: typing.Optional[typing.Callable, builtins.NoneType]
    manage_pending_feedback_results_thread: typing.Optional[trulens.core.utils.threading.Thread,
      builtins.NoneType]
    metadata: typing.Dict
    record_ingest_mode: trulens.core.schema.app.RecordIngestMode
    recording_contexts: _contextvars.ContextVar[trulens.core.app.base.RecordingContext]
    records_with_pending_feedback_results: trulens.core.utils.containers.BlockingSet[trulens.core.schema.record.Record]
    root_callable: pydantic.fields.FieldInfo
    root_class: trulens.core.utils.pyschema.Class
    selector_check_warning: builtins.bool
    selector_nocheck: builtins.bool
    tags: builtins.str
    tru_class_info: trulens.core.utils.pyschema.Class
trulens.core.app.custom.instrument:
  __bases__:
  - trulens.core.instruments.instrument
  __class__: builtins.type
  attributes: {}
trulens.core.app.virtual:
  __class__: builtins.module
  highs: {}
  lows:
    TruVirtual: pydantic._internal._model_construction.ModelMetaclass
    VirtualApp: builtins.type
    VirtualRecord: pydantic._internal._model_construction.ModelMetaclass
trulens.core.app.virtual.TruVirtual:
  __bases__:
  - trulens.core.app.base.App
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    add_record: builtins.function
    app: trulens.core.app.virtual.VirtualApp
    app_extra_json: typing.Union[builtins.str, builtins.int, builtins.float, builtins.bytes,
      builtins.NoneType, typing.Sequence[typing.Any], typing.Dict[builtins.str, typing.Any]]
    app_id: builtins.str
    app_name: builtins.str
    app_version: builtins.str
    connector: trulens.core.database.connector.base.DBConnector
    feedback_definitions: typing.Sequence[builtins.str]
    feedback_mode: trulens.core.schema.feedback.FeedbackMode
    feedbacks: typing.List[trulens.core.feedback.feedback.Feedback]
    initial_app_loader_dump: typing.Optional[trulens.core.utils.serial.SerialBytes,
      builtins.NoneType]
    instrument: typing.Optional[trulens.core.instruments.Instrument, builtins.NoneType]
    instrumented_methods: typing.Dict[builtins.int, typing.Dict[typing.Callable, trulens.core.utils.serial.Lens]]
    manage_pending_feedback_results_thread: typing.Optional[trulens.core.utils.threading.Thread,
      builtins.NoneType]
    metadata: typing.Dict
    record_ingest_mode: trulens.core.schema.app.RecordIngestMode
    recording_contexts: _contextvars.ContextVar[trulens.core.app.base.RecordingContext]
    records_with_pending_feedback_results: trulens.core.utils.containers.BlockingSet[trulens.core.schema.record.Record]
    root_callable: trulens.core.utils.pyschema.Method
    root_class: typing.Any
    selector_check_warning: builtins.bool
    selector_nocheck: builtins.bool
    tags: builtins.str
    tru_class_info: trulens.core.utils.pyschema.Class
trulens.core.app.virtual.VirtualApp:
  __bases__:
  - builtins.dict
  __class__: builtins.type
  attributes:
    root: builtins.function
trulens.core.app.virtual.VirtualRecord:
  __bases__:
  - trulens.core.schema.record.Record
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    app_id: builtins.str
    calls: typing.List[trulens.core.schema.record.RecordAppCall]
    cost: typing.Optional[trulens.core.schema.base.Cost, builtins.NoneType]
    feedback_and_future_results: typing.Optional[typing.List[typing.Tuple[trulens.core.schema.feedback.FeedbackDefinition,
      concurrent.futures._base.Future[trulens.core.schema.feedback.FeedbackResult]]],
      builtins.NoneType]
    feedback_results: typing.Optional[typing.List[concurrent.futures._base.Future[trulens.core.schema.feedback.FeedbackResult]],
      builtins.NoneType]
    main_error: typing.Union[builtins.str, builtins.int, builtins.float, builtins.bytes,
      builtins.NoneType, typing.Sequence[typing.Any], typing.Dict[builtins.str, typing.Any]]
    main_input: typing.Union[builtins.str, builtins.int, builtins.float, builtins.bytes,
      builtins.NoneType, typing.Sequence[typing.Any], typing.Dict[builtins.str, typing.Any]]
    main_output: typing.Union[builtins.str, builtins.int, builtins.float, builtins.bytes,
      builtins.NoneType, typing.Sequence[typing.Any], typing.Dict[builtins.str, typing.Any]]
    meta: typing.Union[builtins.str, builtins.int, builtins.float, builtins.bytes,
      builtins.NoneType, typing.Sequence[typing.Any], typing.Dict[builtins.str, typing.Any]]
    perf: typing.Optional[trulens.core.schema.base.Perf, builtins.NoneType]
    record_id: builtins.str
    tags: typing.Optional[builtins.str, builtins.NoneType]
    ts: datetime.datetime
trulens.core.database:
  __class__: builtins.module
  highs: {}
  lows:
    __path__: builtins.list
trulens.core.database.base:
  __class__: builtins.module
  highs: {}
  lows:
    DB: pydantic._internal._model_construction.ModelMetaclass
    DEFAULT_DATABASE_FILE: builtins.str
    DEFAULT_DATABASE_PREFIX: builtins.str
    DEFAULT_DATABASE_REDACT_KEYS: builtins.bool
    MULTI_CALL_NAME_DELIMITER: builtins.str
trulens.core.database.base.DB:
  __bases__:
  - trulens.core.utils.serial.SerialModel
  - abc.ABC
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    batch_insert_feedback: builtins.function
    batch_insert_ground_truth: builtins.function
    batch_insert_record: builtins.function
    check_db_revision: builtins.function
    delete_app: builtins.function
    get_app: builtins.function
    get_apps: builtins.function
    get_datasets: builtins.function
    get_feedback: builtins.function
    get_feedback_count_by_status: builtins.function
    get_feedback_defs: builtins.function
    get_ground_truth: builtins.function
    get_ground_truths_by_dataset: builtins.function
    get_records_and_feedback: builtins.function
    insert_app: builtins.function
    insert_dataset: builtins.function
    insert_feedback: builtins.function
    insert_feedback_definition: builtins.function
    insert_ground_truth: builtins.function
    insert_record: builtins.function
    migrate_database: builtins.function
    redact_keys: builtins.bool
    reset_database: builtins.function
    table_prefix: builtins.str
trulens.core.database.connector:
  __class__: builtins.module
  highs:
    DBConnector: abc.ABCMeta
    DefaultDBConnector: abc.ABCMeta
  lows:
    __all__: builtins.list
    __path__: builtins.list
trulens.core.database.connector.base:
  __class__: builtins.module
  highs: {}
  lows:
    DBConnector: abc.ABCMeta
trulens.core.database.connector.base.DBConnector:
  __bases__:
  - abc.ABC
  __class__: abc.ABCMeta
  attributes:
    RECORDS_BATCH_TIMEOUT_IN_SEC: builtins.int
    add_app: builtins.function
    add_feedback: builtins.function
    add_feedback_definition: builtins.function
    add_feedbacks: builtins.function
    add_record: builtins.function
    add_record_nowait: builtins.function
    batch_record_queue: queue.Queue
    batch_thread: builtins.NoneType
    db: builtins.property
    delete_app: builtins.function
    get_app: builtins.function
    get_apps: builtins.function
    get_leaderboard: builtins.function
    get_records_and_feedback: builtins.function
    migrate_database: builtins.function
    reset_database: builtins.function
trulens.core.database.connector.default:
  __class__: builtins.module
  highs: {}
  lows:
    DefaultDBConnector: abc.ABCMeta
trulens.core.database.connector.default.DefaultDBConnector:
  __bases__:
  - trulens.core.database.connector.base.DBConnector
  __class__: abc.ABCMeta
  attributes: {}
trulens.core.database.exceptions:
  __class__: builtins.module
  highs: {}
  lows:
    DatabaseVersionException: builtins.type
trulens.core.database.exceptions.DatabaseVersionException:
  __bases__:
  - builtins.Exception
  __class__: builtins.type
  attributes:
    Reason: enum.EnumType
    ahead: builtins.classmethod
    behind: builtins.classmethod
    reconfigured: builtins.classmethod
trulens.core.database.legacy:
  __class__: builtins.module
  highs: {}
  lows:
    __path__: builtins.list
trulens.core.database.legacy.migration:
  __class__: builtins.module
  highs: {}
  lows:
    MIGRATION_UNKNOWN_STR: builtins.str
    UnknownClass: pydantic._internal._model_construction.ModelMetaclass
    VersionException: builtins.type
    commit_migrated_version: builtins.function
    jsonlike_map: builtins.function
    jsonlike_rename_key: builtins.function
    jsonlike_rename_value: builtins.function
    migrate: builtins.function
    migration_versions: builtins.list
    saved_db_locations: builtins.dict
    upgrade_paths: builtins.dict
trulens.core.database.legacy.migration.UnknownClass:
  __bases__:
  - pydantic.main.BaseModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    unknown_method: builtins.function
trulens.core.database.legacy.migration.VersionException:
  __bases__:
  - builtins.Exception
  __class__: builtins.type
  attributes: {}
trulens.core.database.migrations:
  __class__: builtins.module
  highs: {}
  lows:
    DbRevisions: pydantic._internal._model_construction.ModelMetaclass
    __path__: builtins.list
    alembic_config: builtins.function
    downgrade_db: builtins.function
    get_current_db_revision: builtins.function
    get_revision_history: builtins.function
    upgrade_db: builtins.function
trulens.core.database.migrations.DbRevisions:
  __bases__:
  - pydantic.main.BaseModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    ahead: builtins.property
    behind: builtins.property
    current: typing.Optional[builtins.str, builtins.NoneType]
    history: typing.List[builtins.str]
    in_sync: builtins.property
    latest: builtins.property
    load: builtins.classmethod
trulens.core.database.migrations.data:
  __class__: builtins.module
  highs: {}
  lows:
    MIGRATION_UNKNOWN_STR: builtins.str
    data_migrate: builtins.function
    sql_alchemy_migration_versions: builtins.list
    sqlalchemy_upgrade_paths: builtins.dict
trulens.core.database.orm:
  __class__: builtins.module
  highs: {}
  lows:
    BaseWithTablePrefix: builtins.type
    DEFAULT_DATABASE_PREFIX: builtins.str
    ORM: abc.ABCMeta
    T: typing.TypeVar
    make_base_for_prefix: functools._lru_cache_wrapper
    make_orm_for_prefix: functools._lru_cache_wrapper
    new_base: functools._lru_cache_wrapper
    new_orm: builtins.function
trulens.core.database.orm.BaseWithTablePrefix:
  __bases__:
  - builtins.object
  __class__: builtins.type
  attributes: {}
trulens.core.database.orm.ORM:
  __bases__:
  - abc.ABC
  - typing.Generic
  __class__: abc.ABCMeta
  attributes: {}
trulens.core.database.sqlalchemy:
  __class__: builtins.module
  highs: {}
  lows:
    AppsExtractor: builtins.type
    MIGRATION_UNKNOWN_STR: builtins.str
    SQLAlchemyDB: pydantic._internal._model_construction.ModelMetaclass
    SnowflakeImpl: alembic.ddl.impl.ImplMeta
    UNICODE_CHECK: builtins.str
    UNICODE_CLOCK: builtins.str
    UNICODE_HOURGLASS: builtins.str
    UNICODE_STOP: builtins.str
    flatten: builtins.function
    no_perf: builtins.dict
trulens.core.database.sqlalchemy.AppsExtractor:
  __bases__:
  - builtins.object
  __class__: builtins.type
  attributes:
    all_cols: builtins.list
    app_cols: builtins.list
    extra_cols: builtins.list
    extract_apps: builtins.function
    extract_records: builtins.function
    get_df_and_cols: builtins.function
    rec_cols: builtins.list
trulens.core.database.sqlalchemy.SQLAlchemyDB:
  __bases__:
  - trulens.core.database.base.DB
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    engine: typing.Optional[sqlalchemy.engine.base.Engine, builtins.NoneType]
    engine_params: builtins.dict
    from_db_url: builtins.classmethod
    from_tru_args: builtins.classmethod
    orm: typing.Type[trulens.core.database.orm.ORM]
    redact_keys: builtins.bool
    session: typing.Optional[sqlalchemy.orm.session.sessionmaker, builtins.NoneType]
    session_params: builtins.dict
    table_prefix: builtins.str
trulens.core.database.sqlalchemy.SnowflakeImpl:
  __bases__:
  - alembic.ddl.impl.DefaultImpl
  __class__: alembic.ddl.impl.ImplMeta
  attributes: {}
trulens.core.database.utils:
  __class__: builtins.module
  highs: {}
  lows:
    check_db_revision: builtins.function
    coerce_ts: builtins.function
    copy_database: builtins.function
    is_legacy_sqlite: builtins.function
    is_memory_sqlite: builtins.function
trulens.core.feedback:
  __class__: builtins.module
  highs:
    Endpoint: pydantic._internal._model_construction.ModelMetaclass
    EndpointCallback: pydantic._internal._model_construction.ModelMetaclass
    Feedback: pydantic._internal._model_construction.ModelMetaclass
    Provider: pydantic._internal._model_construction.ModelMetaclass
    SkipEval: builtins.type
    SnowflakeFeedback: pydantic._internal._model_construction.ModelMetaclass
  lows:
    __all__: builtins.list
    __path__: builtins.list
trulens.core.feedback.endpoint:
  __class__: builtins.module
  highs: {}
  lows:
    A: typing.TypeVar
    B: typing.TypeVar
    DEFAULT_NETWORK_TIMEOUT: builtins.float
    DEFAULT_RPM: builtins.int
    Endpoint: pydantic._internal._model_construction.ModelMetaclass
    EndpointCallback: pydantic._internal._model_construction.ModelMetaclass
    INSTRUMENT: builtins.str
    T: typing.TypeVar
trulens.core.feedback.endpoint.Endpoint:
  __bases__:
  - trulens.core.utils.pyschema.WithClassInfo
  - trulens.core.utils.serial.SerialModel
  - trulens.core.utils.python.SingletonPerName
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    ENDPOINT_SETUPS: builtins.list
    EndpointSetup: builtins.type
    callback_class: typing.Type[trulens.core.feedback.endpoint.EndpointCallback]
    callback_name: builtins.str
    global_callback: trulens.core.feedback.endpoint.EndpointCallback
    handle_wrapped_call: builtins.function
    instrumented_methods: collections.defaultdict
    name: builtins.str
    pace: trulens.core.utils.pace.Pace
    pace_me: builtins.function
    post: builtins.function
    post_headers: typing.Dict[builtins.str, builtins.str]
    print_instrumented: builtins.classmethod
    retries: builtins.int
    rpm: builtins.float
    run_in_pace: builtins.function
    run_me: builtins.function
    track_all_costs: builtins.staticmethod
    track_all_costs_tally: builtins.staticmethod
    track_cost: builtins.function
    tru_class_info: trulens.core.utils.pyschema.Class
    wrap_function: builtins.function
trulens.core.feedback.endpoint.EndpointCallback:
  __bases__:
  - trulens.core.utils.serial.SerialModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    cost: trulens.core.schema.base.Cost
    endpoint: trulens.core.feedback.endpoint.Endpoint
    handle: builtins.function
    handle_chunk: builtins.function
    handle_classification: builtins.function
    handle_generation: builtins.function
    handle_generation_chunk: builtins.function
trulens.core.feedback.feedback:
  __class__: builtins.module
  highs: {}
  lows:
    A: typing.TypeVar
    Feedback: pydantic._internal._model_construction.ModelMetaclass
    InvalidSelector: builtins.type
    SkipEval: builtins.type
    SnowflakeFeedback: pydantic._internal._model_construction.ModelMetaclass
    TYPE_CHECKING: builtins.bool
trulens.core.feedback.feedback.Feedback:
  __bases__:
  - trulens.core.schema.feedback.FeedbackDefinition
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    agg: typing.Optional[typing.Callable[[typing.Union[typing.Iterable[float], typing.Iterable[typing.Tuple[float,
      float]]]], builtins.float], builtins.NoneType]
    aggregate: builtins.function
    aggregator: typing.Union[trulens.core.utils.pyschema.Function, trulens.core.utils.pyschema.Method,
      builtins.NoneType]
    check_selectors: builtins.function
    combinations: typing.Optional[trulens.core.schema.feedback.FeedbackCombinations,
      builtins.NoneType]
    evaluate_deferred: builtins.staticmethod
    extract_selection: builtins.function
    feedback_definition_id: builtins.str
    higher_is_better: typing.Optional[builtins.bool, builtins.NoneType]
    if_exists: typing.Optional[trulens.core.utils.serial.Lens, builtins.NoneType]
    if_missing: trulens.core.schema.feedback.FeedbackOnMissingParameters
    imp: typing.Optional[typing.Callable[[~A], typing.Union[builtins.float, typing.Tuple[builtins.float,
      typing.Dict[builtins.str, typing.Any]]]], builtins.NoneType]
    implementation: typing.Union[trulens.core.utils.pyschema.Function, trulens.core.utils.pyschema.Method,
      builtins.NoneType]
    of_feedback_definition: builtins.staticmethod
    'on': builtins.function
    on_default: builtins.function
    on_input: builtins.function
    on_input_output: builtins.function
    on_output: builtins.function
    on_prompt: builtins.function
    on_response: builtins.function
    run: builtins.function
    run_and_log: builtins.function
    run_location: typing.Optional[trulens.core.schema.feedback.FeedbackRunLocation,
      builtins.NoneType]
    selectors: typing.Dict[builtins.str, trulens.core.utils.serial.Lens]
    sig: builtins.property
    supplied_name: typing.Optional[builtins.str, builtins.NoneType]
    tru_class_info: trulens.core.utils.pyschema.Class
trulens.core.feedback.feedback.InvalidSelector:
  __bases__:
  - builtins.Exception
  __class__: builtins.type
  attributes: {}
trulens.core.feedback.feedback.SkipEval:
  __bases__:
  - builtins.Exception
  __class__: builtins.type
  attributes: {}
trulens.core.feedback.feedback.SnowflakeFeedback:
  __bases__:
  - trulens.core.feedback.feedback.Feedback
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    agg: typing.Optional[typing.Callable[[typing.Union[typing.Iterable[float], typing.Iterable[typing.Tuple[float,
      float]]]], builtins.float], builtins.NoneType]
    aggregator: typing.Union[trulens.core.utils.pyschema.Function, trulens.core.utils.pyschema.Method,
      builtins.NoneType]
    combinations: typing.Optional[trulens.core.schema.feedback.FeedbackCombinations,
      builtins.NoneType]
    feedback_definition_id: builtins.str
    higher_is_better: typing.Optional[builtins.bool, builtins.NoneType]
    if_exists: typing.Optional[trulens.core.utils.serial.Lens, builtins.NoneType]
    if_missing: trulens.core.schema.feedback.FeedbackOnMissingParameters
    imp: typing.Optional[typing.Callable[[~A], typing.Union[builtins.float, typing.Tuple[builtins.float,
      typing.Dict[builtins.str, typing.Any]]]], builtins.NoneType]
    implementation: typing.Union[trulens.core.utils.pyschema.Function, trulens.core.utils.pyschema.Method,
      builtins.NoneType]
    run_location: typing.Optional[trulens.core.schema.feedback.FeedbackRunLocation,
      builtins.NoneType]
    selectors: typing.Dict[builtins.str, trulens.core.utils.serial.Lens]
    supplied_name: typing.Optional[builtins.str, builtins.NoneType]
    tru_class_info: trulens.core.utils.pyschema.Class
trulens.core.feedback.provider:
  __class__: builtins.module
  highs: {}
  lows:
    Provider: pydantic._internal._model_construction.ModelMetaclass
trulens.core.feedback.provider.Provider:
  __bases__:
  - trulens.core.utils.pyschema.WithClassInfo
  - trulens.core.utils.serial.SerialModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    endpoint: typing.Optional[trulens.core.feedback.endpoint.Endpoint, builtins.NoneType]
    tru_class_info: trulens.core.utils.pyschema.Class
trulens.core.guardrails:
  __class__: builtins.module
  highs: {}
  lows:
    __path__: builtins.list
trulens.core.guardrails.base:
  __class__: builtins.module
  highs: {}
  lows:
    context_filter: builtins.type
trulens.core.guardrails.base.context_filter:
  __bases__:
  - builtins.object
  __class__: builtins.type
  attributes: {}
trulens.core.instruments:
  __class__: builtins.module
  highs: {}
  lows:
    AddInstruments: builtins.type
    Instrument: builtins.type
    TYPE_CHECKING: builtins.bool
    WithInstrumentCallbacks: builtins.type
    class_filter_disjunction: builtins.function
    class_filter_matches: builtins.function
    instrument: builtins.type
trulens.core.instruments.AddInstruments:
  __bases__:
  - builtins.object
  __class__: builtins.type
  attributes:
    method: builtins.classmethod
    methods: builtins.classmethod
trulens.core.instruments.Instrument:
  __bases__:
  - builtins.object
  __class__: builtins.type
  attributes:
    APPS: builtins.str
    Default: builtins.type
    INSTRUMENT: builtins.str
    instrument_bound_methods: builtins.function
    instrument_class: builtins.function
    instrument_method: builtins.function
    instrument_object: builtins.function
    print_instrumentation: builtins.function
    to_instrument_class: builtins.function
    to_instrument_module: builtins.function
    to_instrument_object: builtins.function
    tracked_method_wrapper: builtins.function
trulens.core.instruments.WithInstrumentCallbacks:
  __bases__:
  - builtins.object
  __class__: builtins.type
  attributes:
    get_method_path: builtins.function
    get_methods_for_func: builtins.function
    on_add_record: builtins.function
    on_method_instrumented: builtins.function
    on_new_record: builtins.function
trulens.core.instruments.instrument:
  __bases__:
  - trulens.core.instruments.AddInstruments
  __class__: builtins.type
  attributes: {}
trulens.core.schema:
  __class__: builtins.module
  highs:
    AppDefinition: pydantic._internal._model_construction.ModelMetaclass
    FeedbackDefinition: pydantic._internal._model_construction.ModelMetaclass
    FeedbackMode: enum.EnumType
    FeedbackResult: pydantic._internal._model_construction.ModelMetaclass
    Record: pydantic._internal._model_construction.ModelMetaclass
    Select: builtins.type
  lows:
    __all__: builtins.list
    __path__: builtins.list
trulens.core.schema.app:
  __class__: builtins.module
  highs: {}
  lows:
    AppDefinition: pydantic._internal._model_construction.ModelMetaclass
    RecordIngestMode: enum.EnumType
    TYPE_CHECKING: builtins.bool
trulens.core.schema.app.AppDefinition:
  __bases__:
  - trulens.core.utils.pyschema.WithClassInfo
  - trulens.core.utils.serial.SerialModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    app: trulens.core.utils.serial.JSONized[trulens.core.schema.app.AppDefinition]
    app_extra_json: typing.Union[builtins.str, builtins.int, builtins.float, builtins.bytes,
      builtins.NoneType, typing.Sequence[typing.Any], typing.Dict[builtins.str, typing.Any]]
    app_id: builtins.str
    app_name: builtins.str
    app_version: builtins.str
    continue_session: builtins.staticmethod
    feedback_definitions: typing.Sequence[builtins.str]
    feedback_mode: trulens.core.schema.feedback.FeedbackMode
    get_loadable_apps: builtins.staticmethod
    initial_app_loader_dump: typing.Optional[trulens.core.utils.serial.SerialBytes,
      builtins.NoneType]
    jsonify_extra: builtins.function
    metadata: typing.Dict
    new_session: builtins.staticmethod
    record_ingest_mode: trulens.core.schema.app.RecordIngestMode
    root_class: trulens.core.utils.pyschema.Class
    select_inputs: builtins.classmethod
    select_outputs: builtins.classmethod
    tags: builtins.str
    tru_class_info: trulens.core.utils.pyschema.Class
trulens.core.schema.app.RecordIngestMode:
  __bases__:
  - builtins.str
  - enum.Enum
  __class__: enum.EnumType
  attributes:
    BUFFERED: trulens.core.schema.app.RecordIngestMode
    IMMEDIATE: trulens.core.schema.app.RecordIngestMode
    name: enum.property
    value: enum.property
trulens.core.schema.base:
  __class__: builtins.module
  highs: {}
  lows:
    Cost: pydantic._internal._model_construction.ModelMetaclass
    MAX_DILL_SIZE: builtins.int
    Perf: pydantic._internal._model_construction.ModelMetaclass
trulens.core.schema.base.Cost:
  __bases__:
  - trulens.core.utils.serial.SerialModel
  - pydantic.main.BaseModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    cost: builtins.float
    n_classes: builtins.int
    n_completion_tokens: builtins.int
    n_prompt_tokens: builtins.int
    n_requests: builtins.int
    n_stream_chunks: builtins.int
    n_successful_requests: builtins.int
    n_tokens: builtins.int
trulens.core.schema.base.Perf:
  __bases__:
  - trulens.core.utils.serial.SerialModel
  - pydantic.main.BaseModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    end_time: datetime.datetime
    latency: builtins.property
    min: builtins.staticmethod
    now: builtins.staticmethod
    start_time: datetime.datetime
trulens.core.schema.dataset:
  __class__: builtins.module
  highs: {}
  lows:
    Dataset: pydantic._internal._model_construction.ModelMetaclass
trulens.core.schema.dataset.Dataset:
  __bases__:
  - trulens.core.utils.serial.SerialModel
  - collections.abc.Hashable
  - typing.Generic
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    dataset_id: builtins.str
    meta: typing.Dict
    name: builtins.str
trulens.core.schema.feedback:
  __class__: builtins.module
  highs: {}
  lows:
    FeedbackCall: pydantic._internal._model_construction.ModelMetaclass
    FeedbackCombinations: enum.EnumType
    FeedbackDefinition: pydantic._internal._model_construction.ModelMetaclass
    FeedbackMode: enum.EnumType
    FeedbackOnMissingParameters: enum.EnumType
    FeedbackResult: pydantic._internal._model_construction.ModelMetaclass
    FeedbackResultStatus: enum.EnumType
    FeedbackRunLocation: enum.EnumType
    T: typing.TypeVar
trulens.core.schema.feedback.FeedbackCall:
  __bases__:
  - trulens.core.utils.serial.SerialModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    args: typing.Dict[builtins.str, typing.Union[builtins.str, builtins.int, builtins.float,
      builtins.bytes, builtins.NoneType, typing.Sequence[typing.Any], typing.Dict[builtins.str,
      typing.Any]]]
    meta: typing.Dict[builtins.str, typing.Any]
    ret: typing.Union[builtins.float, typing.List[builtins.float], typing.List[typing.Tuple]]
trulens.core.schema.feedback.FeedbackCombinations:
  __bases__:
  - builtins.str
  - enum.Enum
  __class__: enum.EnumType
  attributes:
    PRODUCT: trulens.core.schema.feedback.FeedbackCombinations
    ZIP: trulens.core.schema.feedback.FeedbackCombinations
    name: enum.property
    value: enum.property
trulens.core.schema.feedback.FeedbackDefinition:
  __bases__:
  - trulens.core.utils.pyschema.WithClassInfo
  - trulens.core.utils.serial.SerialModel
  - collections.abc.Hashable
  - typing.Generic
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    aggregator: typing.Union[trulens.core.utils.pyschema.Function, trulens.core.utils.pyschema.Method,
      builtins.NoneType]
    combinations: typing.Optional[trulens.core.schema.feedback.FeedbackCombinations,
      builtins.NoneType]
    feedback_definition_id: builtins.str
    higher_is_better: typing.Optional[builtins.bool, builtins.NoneType]
    if_exists: typing.Optional[trulens.core.utils.serial.Lens, builtins.NoneType]
    if_missing: trulens.core.schema.feedback.FeedbackOnMissingParameters
    implementation: typing.Union[trulens.core.utils.pyschema.Function, trulens.core.utils.pyschema.Method,
      builtins.NoneType]
    name: builtins.property
    run_location: typing.Optional[trulens.core.schema.feedback.FeedbackRunLocation,
      builtins.NoneType]
    selectors: typing.Dict[builtins.str, trulens.core.utils.serial.Lens]
    supplied_name: typing.Optional[builtins.str, builtins.NoneType]
    tru_class_info: trulens.core.utils.pyschema.Class
trulens.core.schema.feedback.FeedbackMode:
  __bases__:
  - builtins.str
  - enum.Enum
  __class__: enum.EnumType
  attributes:
    DEFERRED: trulens.core.schema.feedback.FeedbackMode
    NONE: trulens.core.schema.feedback.FeedbackMode
    WITH_APP: trulens.core.schema.feedback.FeedbackMode
    WITH_APP_THREAD: trulens.core.schema.feedback.FeedbackMode
    name: enum.property
    value: enum.property
trulens.core.schema.feedback.FeedbackOnMissingParameters:
  __bases__:
  - builtins.str
  - enum.Enum
  __class__: enum.EnumType
  attributes:
    ERROR: trulens.core.schema.feedback.FeedbackOnMissingParameters
    IGNORE: trulens.core.schema.feedback.FeedbackOnMissingParameters
    WARN: trulens.core.schema.feedback.FeedbackOnMissingParameters
    name: enum.property
    value: enum.property
trulens.core.schema.feedback.FeedbackResult:
  __bases__:
  - trulens.core.utils.serial.SerialModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    calls: typing.List[trulens.core.schema.feedback.FeedbackCall]
    cost: trulens.core.schema.base.Cost
    error: typing.Optional[builtins.str, builtins.NoneType]
    feedback_definition_id: typing.Optional[builtins.str, builtins.NoneType]
    feedback_result_id: builtins.str
    last_ts: datetime.datetime
    multi_result: typing.Optional[builtins.str, builtins.NoneType]
    name: builtins.str
    record_id: builtins.str
    result: typing.Optional[builtins.float, builtins.NoneType]
    status: trulens.core.schema.feedback.FeedbackResultStatus
trulens.core.schema.feedback.FeedbackResultStatus:
  __bases__:
  - builtins.str
  - enum.Enum
  __class__: enum.EnumType
  attributes:
    DONE: trulens.core.schema.feedback.FeedbackResultStatus
    FAILED: trulens.core.schema.feedback.FeedbackResultStatus
    NONE: trulens.core.schema.feedback.FeedbackResultStatus
    RUNNING: trulens.core.schema.feedback.FeedbackResultStatus
    SKIPPED: trulens.core.schema.feedback.FeedbackResultStatus
    name: enum.property
    value: enum.property
trulens.core.schema.feedback.FeedbackRunLocation:
  __bases__:
  - builtins.str
  - enum.Enum
  __class__: enum.EnumType
  attributes:
    IN_APP: trulens.core.schema.feedback.FeedbackRunLocation
    SNOWFLAKE: trulens.core.schema.feedback.FeedbackRunLocation
    name: enum.property
    value: enum.property
trulens.core.schema.groundtruth:
  __class__: builtins.module
  highs: {}
  lows:
    GroundTruth: pydantic._internal._model_construction.ModelMetaclass
trulens.core.schema.groundtruth.GroundTruth:
  __bases__:
  - trulens.core.utils.serial.SerialModel
  - collections.abc.Hashable
  - typing.Generic
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    dataset_id: builtins.str
    expected_chunks: typing.Optional[typing.Sequence[typing.Dict], builtins.NoneType]
    expected_response: typing.Optional[builtins.str, builtins.NoneType]
    ground_truth_id: builtins.str
    meta: typing.Optional[typing.Dict, builtins.NoneType]
    query: builtins.str
    query_id: typing.Optional[builtins.str, builtins.NoneType]
trulens.core.schema.record:
  __class__: builtins.module
  highs: {}
  lows:
    Record: pydantic._internal._model_construction.ModelMetaclass
    RecordAppCall: pydantic._internal._model_construction.ModelMetaclass
    RecordAppCallMethod: pydantic._internal._model_construction.ModelMetaclass
    T: typing.TypeVar
trulens.core.schema.record.Record:
  __bases__:
  - trulens.core.utils.serial.SerialModel
  - collections.abc.Hashable
  - typing.Generic
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    app_id: builtins.str
    calls: typing.List[trulens.core.schema.record.RecordAppCall]
    cost: typing.Optional[trulens.core.schema.base.Cost, builtins.NoneType]
    feedback_and_future_results: typing.Optional[typing.List[typing.Tuple[trulens.core.schema.feedback.FeedbackDefinition,
      concurrent.futures._base.Future[trulens.core.schema.feedback.FeedbackResult]]],
      builtins.NoneType]
    feedback_results: typing.Optional[typing.List[concurrent.futures._base.Future[trulens.core.schema.feedback.FeedbackResult]],
      builtins.NoneType]
    layout_calls_as_app: builtins.function
    main_error: typing.Union[builtins.str, builtins.int, builtins.float, builtins.bytes,
      builtins.NoneType, typing.Sequence[typing.Any], typing.Dict[builtins.str, typing.Any]]
    main_input: typing.Union[builtins.str, builtins.int, builtins.float, builtins.bytes,
      builtins.NoneType, typing.Sequence[typing.Any], typing.Dict[builtins.str, typing.Any]]
    main_output: typing.Union[builtins.str, builtins.int, builtins.float, builtins.bytes,
      builtins.NoneType, typing.Sequence[typing.Any], typing.Dict[builtins.str, typing.Any]]
    meta: typing.Union[builtins.str, builtins.int, builtins.float, builtins.bytes,
      builtins.NoneType, typing.Sequence[typing.Any], typing.Dict[builtins.str, typing.Any]]
    perf: typing.Optional[trulens.core.schema.base.Perf, builtins.NoneType]
    record_id: builtins.str
    tags: typing.Optional[builtins.str, builtins.NoneType]
    ts: datetime.datetime
    wait_for_feedback_results: builtins.function
trulens.core.schema.record.RecordAppCall:
  __bases__:
  - trulens.core.utils.serial.SerialModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    args: typing.Union[builtins.str, builtins.int, builtins.float, builtins.bytes,
      builtins.NoneType, typing.Sequence[typing.Any], typing.Dict[builtins.str, typing.Any]]
    call_id: builtins.str
    error: typing.Optional[builtins.str, builtins.NoneType]
    method: builtins.property
    perf: typing.Optional[trulens.core.schema.base.Perf, builtins.NoneType]
    pid: builtins.int
    rets: typing.Union[builtins.str, builtins.int, builtins.float, builtins.bytes,
      builtins.NoneType, typing.Sequence[typing.Any], typing.Dict[builtins.str, typing.Any]]
    stack: typing.List[trulens.core.schema.record.RecordAppCallMethod]
    tid: builtins.int
    top: builtins.property
trulens.core.schema.record.RecordAppCallMethod:
  __bases__:
  - trulens.core.utils.serial.SerialModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    method: trulens.core.utils.pyschema.Method
    path: trulens.core.utils.serial.Lens
trulens.core.schema.select:
  __class__: builtins.module
  highs: {}
  lows:
    Select: builtins.type
    T: typing.TypeVar
trulens.core.schema.select.Select:
  __bases__:
  - builtins.object
  __class__: builtins.type
  attributes:
    App: trulens.core.utils.serial.Lens
    Query: pydantic._internal._model_construction.ModelMetaclass
    Record: trulens.core.utils.serial.Lens
    RecordArgs: trulens.core.utils.serial.Lens
    RecordCall: trulens.core.utils.serial.Lens
    RecordCalls: trulens.core.utils.serial.Lens
    RecordInput: trulens.core.utils.serial.Lens
    RecordOutput: trulens.core.utils.serial.Lens
    RecordRets: trulens.core.utils.serial.Lens
    Tru: trulens.core.utils.serial.Lens
    dequalify: builtins.staticmethod
    for_app: builtins.staticmethod
    for_record: builtins.staticmethod
    path_and_method: builtins.staticmethod
    render_for_dashboard: builtins.staticmethod
trulens.core.schema.types:
  __class__: builtins.module
  highs: {}
  lows:
    new_call_id: builtins.function
trulens.core.session:
  __class__: builtins.module
  highs: {}
  lows:
    Tru: builtins.function
    TruSession: pydantic._internal._model_construction.ModelMetaclass
trulens.core.session.TruSession:
  __bases__:
  - pydantic.main.BaseModel
  - trulens.core.utils.python.SingletonPerName
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    DEFERRED_NUM_RUNS: builtins.int
    GROUND_TRUTHS_BATCH_SIZE: builtins.int
    RECORDS_BATCH_TIMEOUT_IN_SEC: builtins.int
    RETRY_FAILED_SECONDS: builtins.float
    RETRY_RUNNING_SECONDS: builtins.float
    add_app: builtins.function
    add_feedback: builtins.function
    add_feedbacks: builtins.function
    add_ground_truth_to_dataset: builtins.function
    add_record: builtins.function
    add_record_nowait: builtins.function
    connector: typing.Optional[trulens.core.database.connector.base.DBConnector, builtins.NoneType]
    delete_app: builtins.function
    get_app: builtins.function
    get_apps: builtins.function
    get_ground_truth: builtins.function
    get_leaderboard: builtins.function
    get_records_and_feedback: builtins.function
    migrate_database: builtins.function
    reset_database: builtins.function
    run_evaluator: builtins.function
    run_feedback_functions: builtins.function
    start_evaluator: builtins.function
    stop_evaluator: builtins.function
trulens.core.utils:
  __class__: builtins.module
  highs: {}
  lows:
    __path__: builtins.list
trulens.core.utils.asynchro:
  __class__: builtins.module
  highs: {}
  lows:
    A: typing.TypeVar
    B: typing.TypeVar
    T: typing.TypeVar
    desync: builtins.function
    sync: builtins.function
trulens.core.utils.constants:
  __class__: builtins.module
  highs: {}
  lows:
    ALL_SPECIAL_KEYS: builtins.set
    CIRCLE: builtins.str
    CLASS_INFO: builtins.str
    ERROR: builtins.str
    NOSERIO: builtins.str
trulens.core.utils.containers:
  __class__: builtins.module
  highs: {}
  lows:
    A: typing.TypeVar
    B: typing.TypeVar
    BlockingSet: builtins.type
    T: typing.TypeVar
    dict_merge_with: builtins.function
    dict_set_with: builtins.function
    dict_set_with_multikey: builtins.function
    first: builtins.function
    is_empty: builtins.function
    iterable_peek: builtins.function
    second: builtins.function
    third: builtins.function
trulens.core.utils.containers.BlockingSet:
  __bases__:
  - builtins.set
  - typing.Generic
  __class__: builtins.type
  attributes:
    empty: builtins.function
    peek: builtins.function
trulens.core.utils.deprecation:
  __class__: builtins.module
  highs: {}
  lows:
    PACKAGES_MIGRATION_LINK: builtins.str
    class_moved: builtins.function
    function_moved: builtins.function
    has_deprecated: builtins.function
    has_moved: builtins.function
    moved: builtins.function
    packages_dep_warn: builtins.function
trulens.core.utils.imports:
  __class__: builtins.module
  highs: {}
  lows:
    Dummy: builtins.type
    ImportErrorMessages: builtins.type
    MESSAGE_DEBUG_OPTIONAL_PACKAGE_NOT_FOUND: builtins.str
    MESSAGE_ERROR_REQUIRED_PACKAGE_NOT_FOUND: builtins.str
    MESSAGE_FRAGMENT_VERSION_MISMATCH: builtins.str
    MESSAGE_FRAGMENT_VERSION_MISMATCH_OPTIONAL: builtins.str
    MESSAGE_FRAGMENT_VERSION_MISMATCH_PIP: builtins.str
    MESSAGE_FRAGMENT_VERSION_MISMATCH_REQUIRED: builtins.str
    OptionalImports: builtins.type
    REQUIREMENT_BERT_SCORE: trulens.core.utils.imports.ImportErrorMessages
    REQUIREMENT_EVALUATE: trulens.core.utils.imports.ImportErrorMessages
    REQUIREMENT_FEEDBACK: trulens.core.utils.imports.ImportErrorMessages
    REQUIREMENT_INSTRUMENT_LANGCHAIN: trulens.core.utils.imports.ImportErrorMessages
    REQUIREMENT_INSTRUMENT_LLAMA: trulens.core.utils.imports.ImportErrorMessages
    REQUIREMENT_INSTRUMENT_NEMO: trulens.core.utils.imports.ImportErrorMessages
    REQUIREMENT_NOTEBOOK: trulens.core.utils.imports.ImportErrorMessages
    REQUIREMENT_OPENAI: trulens.core.utils.imports.ImportErrorMessages
    REQUIREMENT_PROVIDER_BEDROCK: trulens.core.utils.imports.ImportErrorMessages
    REQUIREMENT_PROVIDER_CORTEX: trulens.core.utils.imports.ImportErrorMessages
    REQUIREMENT_PROVIDER_HUGGINGFACE: trulens.core.utils.imports.ImportErrorMessages
    REQUIREMENT_PROVIDER_LANGCHAIN: trulens.core.utils.imports.ImportErrorMessages
    REQUIREMENT_PROVIDER_LITELLM: trulens.core.utils.imports.ImportErrorMessages
    REQUIREMENT_PROVIDER_OPENAI: trulens.core.utils.imports.ImportErrorMessages
    REQUIREMENT_SKLEARN: trulens.core.utils.imports.ImportErrorMessages
    REQUIREMENT_SNOWFLAKE: trulens.core.utils.imports.ImportErrorMessages
    VersionConflict: builtins.type
    all_packages: builtins.dict
    check_imports: builtins.function
    format_import_errors: builtins.function
    get_package_version: builtins.function
    is_dummy: builtins.function
    optional_packages: builtins.dict
    parse_version: builtins.function
    pin_spec: builtins.function
    required_packages: builtins.dict
    requirements_of_file: builtins.function
    safe_importlib_package_name: builtins.function
    static_resource: builtins.function
trulens.core.utils.imports.Dummy:
  __bases__:
  - builtins.type
  __class__: builtins.type
  attributes: {}
trulens.core.utils.imports.ImportErrorMessages:
  __bases__:
  - builtins.object
  __class__: builtins.type
  attributes: {}
trulens.core.utils.imports.OptionalImports:
  __bases__:
  - builtins.object
  __class__: builtins.type
  attributes:
    assert_installed: builtins.function
trulens.core.utils.imports.VersionConflict:
  __bases__:
  - builtins.Exception
  __class__: builtins.type
  attributes: {}
trulens.core.utils.json:
  __class__: builtins.module
  highs: {}
  lows:
    ALL_SPECIAL_KEYS: builtins.set
    CIRCLE: builtins.str
    CLASS_INFO: builtins.str
    ENCODERS_BY_TYPE: builtins.dict
    JSON_BASES: builtins.tuple
    T: typing.TypeVar
    TYPE_CHECKING: builtins.bool
    encode_httpx_url: builtins.function
    encode_openai_timeout: builtins.function
    json_default: builtins.function
    json_str_of_obj: builtins.function
    jsonify: builtins.function
    jsonify_for_ui: builtins.function
    obj_id_of_obj: builtins.function
trulens.core.utils.keys:
  __class__: builtins.module
  highs: {}
  lows:
    ApiKeyError: builtins.type
    BaseKeyError: builtins.type
    MissingKeyError: builtins.type
    REDACTED_VALUE: builtins.str
    TEMPLATE_VALUES: builtins.set
    UNICODE_CHECK: builtins.str
    UNICODE_STOP: builtins.str
    check_keys: builtins.function
    check_or_set_keys: builtins.function
    cohere_agent: builtins.NoneType
    get_config: builtins.function
    get_config_file: builtins.function
    get_huggingface_headers: builtins.function
    redact_value: builtins.function
    should_redact_key: builtins.function
    should_redact_value: builtins.function
    values_to_redact: builtins.set
trulens.core.utils.keys.ApiKeyError:
  __bases__:
  - trulens.core.utils.keys.BaseKeyError
  __class__: builtins.type
  attributes: {}
trulens.core.utils.keys.BaseKeyError:
  __bases__:
  - builtins.RuntimeError
  __class__: builtins.type
  attributes: {}
trulens.core.utils.keys.MissingKeyError:
  __bases__:
  - trulens.core.utils.keys.BaseKeyError
  __class__: builtins.type
  attributes: {}
trulens.core.utils.pace:
  __class__: builtins.module
  highs: {}
  lows:
    Pace: pydantic._internal._model_construction.ModelMetaclass
trulens.core.utils.pace.Pace:
  __bases__:
  - pydantic.main.BaseModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    last_mark: datetime.datetime
    lock: _thread.lock
    mark: builtins.function
    mark_expirations: typing.Deque[datetime.datetime]
    marks_per_second: builtins.float
    max_marks: builtins.int
    seconds_per_period: builtins.float
    seconds_per_period_timedelta: datetime.timedelta
trulens.core.utils.pyschema:
  __class__: builtins.module
  highs: {}
  lows:
    Bindings: pydantic._internal._model_construction.ModelMetaclass
    CLASS_INFO: builtins.str
    Class: pydantic._internal._model_construction.ModelMetaclass
    ERROR: builtins.str
    Function: pydantic._internal._model_construction.ModelMetaclass
    FunctionOrMethod: pydantic._internal._model_construction.ModelMetaclass
    Method: pydantic._internal._model_construction.ModelMetaclass
    Module: pydantic._internal._model_construction.ModelMetaclass
    NOSERIO: builtins.str
    Obj: pydantic._internal._model_construction.ModelMetaclass
    WithClassInfo: pydantic._internal._model_construction.ModelMetaclass
    builtin_init_dummy: builtins.function
    clean_attributes: builtins.function
    is_noserio: builtins.function
    noserio: builtins.function
    object_module: builtins.function
    safe_getattr: builtins.function
trulens.core.utils.pyschema.Bindings:
  __bases__:
  - trulens.core.utils.serial.SerialModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    args: typing.Tuple
    kwargs: typing.Dict[builtins.str, typing.Any]
    load: builtins.function
    of_bound_arguments: builtins.staticmethod
trulens.core.utils.pyschema.Class:
  __bases__:
  - trulens.core.utils.serial.SerialModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    base_class: builtins.function
    bases: typing.Optional[typing.Sequence[trulens.core.utils.pyschema.Class], builtins.NoneType]
    load: builtins.function
    module: trulens.core.utils.pyschema.Module
    name: builtins.str
    noserio_issubclass: builtins.function
    of_class: builtins.staticmethod
    of_class_info: builtins.staticmethod
    of_object: builtins.staticmethod
trulens.core.utils.pyschema.Function:
  __bases__:
  - trulens.core.utils.pyschema.FunctionOrMethod
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    cls: typing.Optional[trulens.core.utils.pyschema.Class, builtins.NoneType]
    module: trulens.core.utils.pyschema.Module
    name: builtins.str
    of_function: builtins.staticmethod
trulens.core.utils.pyschema.FunctionOrMethod:
  __bases__:
  - trulens.core.utils.serial.SerialModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    load: builtins.function
    of_callable: builtins.staticmethod
trulens.core.utils.pyschema.Method:
  __bases__:
  - trulens.core.utils.pyschema.FunctionOrMethod
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    name: builtins.str
    obj: trulens.core.utils.pyschema.Obj
    of_method: builtins.staticmethod
trulens.core.utils.pyschema.Module:
  __bases__:
  - trulens.core.utils.serial.SerialModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    load: builtins.function
    module_name: builtins.str
    of_module: builtins.function
    of_module_name: builtins.function
    package_name: typing.Optional[builtins.str, builtins.NoneType]
trulens.core.utils.pyschema.Obj:
  __bases__:
  - trulens.core.utils.serial.SerialModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    cls: trulens.core.utils.pyschema.Class
    id: builtins.int
    init_bindings: typing.Optional[trulens.core.utils.pyschema.Bindings, builtins.NoneType]
    load: builtins.function
    of_object: builtins.staticmethod
trulens.core.utils.pyschema.WithClassInfo:
  __bases__:
  - pydantic.main.BaseModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    get_class: builtins.staticmethod
    load: builtins.staticmethod
    of_class: builtins.staticmethod
    of_object: builtins.staticmethod
    tru_class_info: trulens.core.utils.pyschema.Class
trulens.core.utils.python:
  __class__: builtins.module
  highs: {}
  lows:
    EmptyType: builtins.type
    OpaqueWrapper: builtins.type
    STACK: builtins.str
    SingletonInfo: builtins.type
    SingletonPerName: builtins.type
    T: typing.TypeVar
    callable_name: builtins.function
    caller_frame: builtins.function
    caller_frameinfo: builtins.function
    class_name: builtins.function
    code_line: builtins.function
    for_all_methods: builtins.function
    get_all_local_in_call_stack: builtins.function
    get_first_local_in_call_stack: builtins.function
    get_task_stack: builtins.function
    id_str: builtins.function
    is_really_coroutinefunction: builtins.function
    locals_except: builtins.function
    merge_stacks: builtins.function
    module_name: builtins.function
    run_before: builtins.function
    safe_hasattr: builtins.function
    safe_issubclass: builtins.function
    safe_signature: builtins.function
    stack_with_tasks: builtins.function
    superstack: builtins.function
    task_factory_with_stack: builtins.function
    tru_new_event_loop: builtins.function
    wrap_awaitable: builtins.function
    wrap_generator: builtins.function
trulens.core.utils.python.EmptyType:
  __bases__:
  - builtins.type
  __class__: builtins.type
  attributes: {}
trulens.core.utils.python.OpaqueWrapper:
  __bases__:
  - typing.Generic
  __class__: builtins.type
  attributes:
    unwrap: builtins.function
trulens.core.utils.python.SingletonInfo:
  __bases__:
  - typing.Generic
  __class__: builtins.type
  attributes:
    name: builtins.NoneType
    warning: builtins.function
trulens.core.utils.python.SingletonPerName:
  __bases__:
  - builtins.object
  __class__: builtins.type
  attributes:
    delete_singleton: builtins.function
    delete_singleton_by_name: builtins.staticmethod
    warning: builtins.function
trulens.core.utils.serial:
  __class__: builtins.module
  highs: {}
  lows:
    Collect: pydantic._internal._model_construction.ModelMetaclass
    GetAttribute: pydantic._internal._model_construction.ModelMetaclass
    GetIndex: pydantic._internal._model_construction.ModelMetaclass
    GetIndices: pydantic._internal._model_construction.ModelMetaclass
    GetItem: pydantic._internal._model_construction.ModelMetaclass
    GetItemOrAttribute: pydantic._internal._model_construction.ModelMetaclass
    GetItems: pydantic._internal._model_construction.ModelMetaclass
    GetSlice: pydantic._internal._model_construction.ModelMetaclass
    JSONPath: pydantic._internal._model_construction.ModelMetaclass
    JSON_BASES: builtins.tuple
    JSONized: builtins.type
    Lens: pydantic._internal._model_construction.ModelMetaclass
    ParseException: builtins.type
    SerialBytes: pydantic._internal._model_construction.ModelMetaclass
    SerialModel: pydantic._internal._model_construction.ModelMetaclass
    Step: pydantic._internal._model_construction.ModelMetaclass
    StepItemOrAttribute: pydantic._internal._model_construction.ModelMetaclass
    T: typing.TypeVar
    all_objects: builtins.function
    all_queries: builtins.function
    leaf_queries: builtins.function
    leafs: builtins.function
    matching_objects: builtins.function
    matching_queries: builtins.function
    model_dump: builtins.function
trulens.core.utils.serial.Collect:
  __bases__:
  - trulens.core.utils.serial.Step
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    collect: builtins.NoneType
trulens.core.utils.serial.GetAttribute:
  __bases__:
  - trulens.core.utils.serial.StepItemOrAttribute
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    attribute: builtins.str
trulens.core.utils.serial.GetIndex:
  __bases__:
  - trulens.core.utils.serial.Step
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    index: builtins.int
trulens.core.utils.serial.GetIndices:
  __bases__:
  - trulens.core.utils.serial.Step
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    indices: typing.Tuple[builtins.int, ...]
trulens.core.utils.serial.GetItem:
  __bases__:
  - trulens.core.utils.serial.StepItemOrAttribute
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    item: builtins.str
trulens.core.utils.serial.GetItemOrAttribute:
  __bases__:
  - trulens.core.utils.serial.StepItemOrAttribute
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    item_or_attribute: builtins.str
trulens.core.utils.serial.GetItems:
  __bases__:
  - trulens.core.utils.serial.Step
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    items: typing.Tuple[builtins.str, ...]
trulens.core.utils.serial.GetSlice:
  __bases__:
  - trulens.core.utils.serial.Step
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    start: typing.Optional[builtins.int, builtins.NoneType]
    step: typing.Optional[builtins.int, builtins.NoneType]
    stop: typing.Optional[builtins.int, builtins.NoneType]
trulens.core.utils.serial.JSONized:
  __bases__:
  - builtins.dict
  - typing.Generic
  __class__: builtins.type
  attributes: {}
trulens.core.utils.serial.Lens:
  __bases__:
  - pydantic.main.BaseModel
  - collections.abc.Sized
  - collections.abc.Hashable
  - typing.Generic
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    dump_as_string: builtins.function
    existing_prefix: builtins.function
    exists: builtins.function
    get: builtins.function
    get_sole_item: builtins.function
    is_immediate_prefix_of: builtins.function
    is_prefix_of: builtins.function
    of_string: builtins.staticmethod
    path: typing.Tuple[trulens.core.utils.serial.Step, ...]
    set: builtins.function
    set_or_append: builtins.function
    validate_from_string: builtins.classmethod
trulens.core.utils.serial.ParseException:
  __bases__:
  - builtins.Exception
  __class__: builtins.type
  attributes: {}
trulens.core.utils.serial.SerialBytes:
  __bases__:
  - pydantic.main.BaseModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    data: builtins.bytes
trulens.core.utils.serial.SerialModel:
  __bases__:
  - pydantic.main.BaseModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    formatted_objects: _contextvars.ContextVar
    replace: builtins.function
    update: builtins.function
trulens.core.utils.serial.Step:
  __bases__:
  - pydantic.main.BaseModel
  - collections.abc.Hashable
  - typing.Generic
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    get: builtins.function
    set: builtins.function
trulens.core.utils.serial.StepItemOrAttribute:
  __bases__:
  - trulens.core.utils.serial.Step
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    get_item_or_attribute: builtins.function
trulens.core.utils.text:
  __class__: builtins.module
  highs: {}
  lows:
    UNICODE_CHECK: builtins.str
    UNICODE_CLOCK: builtins.str
    UNICODE_HOURGLASS: builtins.str
    UNICODE_LOCK: builtins.str
    UNICODE_SQUID: builtins.str
    UNICODE_STOP: builtins.str
    UNICODE_YIELD: builtins.str
    format_quantity: builtins.function
    format_seconds: builtins.function
    make_retab: builtins.function
    retab: builtins.function
trulens.core.utils.threading:
  __class__: builtins.module
  highs: {}
  lows:
    A: typing.TypeVar
    DEFAULT_NETWORK_TIMEOUT: builtins.float
    TP: builtins.type
    Thread: builtins.type
    ThreadPoolExecutor: builtins.type
trulens.core.utils.threading.TP:
  __bases__:
  - trulens.core.utils.python.SingletonPerName
  __class__: builtins.type
  attributes:
    DEBUG_TIMEOUT: builtins.float
    MAX_THREADS: builtins.int
    submit: builtins.function
trulens.core.utils.threading.Thread:
  __bases__:
  - threading.Thread
  __class__: builtins.type
  attributes: {}
trulens.core.utils.threading.ThreadPoolExecutor:
  __bases__:
  - concurrent.futures.thread.ThreadPoolExecutor
  __class__: builtins.type
  attributes: {}
trulens.core.utils.trulens:
  __class__: builtins.module
  highs: {}
  lows:
    COMPONENT_VIEWS: builtins.list
    Other: trulens.core.app.base.ComponentViewMeta
    component_of_json: builtins.function
    constructor_of_class: builtins.function
    get_feedback_result: builtins.function
trulens.core.utils.trulens.Other:
  __bases__:
  - trulens.core.app.base.Other
  - trulens.core.app.base.TrulensComponent
  __class__: trulens.core.app.base.ComponentViewMeta
  attributes: {}
trulens.dashboard:
  __class__: builtins.module
  __version__: 1.0.1a1
  highs:
    run_dashboard: builtins.function
    stop_dashboard: builtins.function
  lows:
    __all__: builtins.list
    __path__: builtins.list
    __version__: builtins.str
trulens.dashboard.Leaderboard:
  __class__: builtins.module
  highs: {}
  lows:
    MIGRATION_UNKNOWN_STR: builtins.str
    leaderboard: builtins.function
trulens.dashboard.appui:
  __class__: builtins.module
  highs: {}
  lows:
    AppUI: traitlets.traitlets.MetaHasTraits
    JSON_BASES: builtins.tuple
    RecordWidget: builtins.type
    Selector: traitlets.traitlets.MetaHasTraits
    SelectorValue: traitlets.traitlets.MetaHasTraits
    VALUE_MAX_CHARS: builtins.int
    debug_style: builtins.dict
trulens.dashboard.appui.AppUI:
  __bases__:
  - traitlets.traitlets.HasTraits
  __class__: traitlets.traitlets.MetaHasTraits
  attributes:
    add_app_selection: builtins.function
    add_record: builtins.function
    add_record_selection: builtins.function
    make_on_delete_app_selector: builtins.function
    make_on_delete_record_selector: builtins.function
    update_app_selections: builtins.function
trulens.dashboard.appui.RecordWidget:
  __bases__:
  - builtins.object
  __class__: builtins.type
  attributes:
    remove_selector: builtins.function
    set_comp: builtins.function
    set_human: builtins.function
    update_selections: builtins.function
trulens.dashboard.appui.Selector:
  __bases__:
  - traitlets.traitlets.HasTraits
  __class__: traitlets.traitlets.MetaHasTraits
  attributes:
    jpath: traitlets.traitlets.Any
    select: traitlets.traitlets.Unicode
trulens.dashboard.appui.SelectorValue:
  __bases__:
  - traitlets.traitlets.HasTraits
  __class__: traitlets.traitlets.MetaHasTraits
  attributes:
    obj: traitlets.traitlets.Any
    selector: traitlets.traitlets.Any
    update: builtins.function
    update_obj: builtins.function
    update_selector: builtins.function
trulens.dashboard.components:
  __class__: builtins.module
  highs: {}
  lows:
    __path__: builtins.list
trulens.dashboard.components.record_viewer:
  __class__: builtins.module
  highs: {}
  lows:
    __path__: builtins.list
    build_dir: builtins.str
    parent_dir: builtins.str
    record_viewer: builtins.function
trulens.dashboard.display:
  __class__: builtins.module
  highs: {}
  lows:
    get_icon: builtins.function
trulens.dashboard.notebook_utils:
  __class__: builtins.module
  highs: {}
  lows:
    is_notebook: builtins.function
    setup_widget_stdout_stderr: builtins.function
trulens.dashboard.run:
  __class__: builtins.module
  highs: {}
  lows:
    DASHBOARD_START_TIMEOUT: builtins.int
    find_unused_port: builtins.function
    run_dashboard: builtins.function
    stop_dashboard: builtins.function
trulens.dashboard.streamlit:
  __class__: builtins.module
  highs: {}
  lows:
    FeedbackDisplay: pydantic._internal._model_construction.ModelMetaclass
    MIGRATION_UNKNOWN_STR: builtins.str
    trulens_feedback: builtins.function
    trulens_leaderboard: builtins.function
    trulens_trace: builtins.function
trulens.dashboard.streamlit.FeedbackDisplay:
  __bases__:
  - pydantic.main.BaseModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    calls: typing.List[trulens.core.schema.feedback.FeedbackCall]
    icon: builtins.str
    score: builtins.float
trulens.dashboard.streamlit_utils:
  __class__: builtins.module
  highs: {}
  lows:
    init_from_args: builtins.function
trulens.dashboard.ux:
  __class__: builtins.module
  highs: {}
  lows:
    __path__: builtins.list
trulens.dashboard.ux.apps:
  __class__: builtins.module
  highs: {}
  lows:
    ChatRecord: pydantic._internal._model_construction.ModelMetaclass
trulens.dashboard.ux.apps.ChatRecord:
  __bases__:
  - pydantic.main.BaseModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    app: trulens.core.app.base.App
    app_json: typing.Union[builtins.str, builtins.int, builtins.float, builtins.bytes,
      builtins.NoneType, typing.Sequence[typing.Any], typing.Dict[builtins.str, typing.Any]]
    computer: typing.Optional[builtins.str, builtins.NoneType]
    human: typing.Optional[builtins.str, builtins.NoneType]
    record_json: typing.Union[builtins.str, builtins.int, builtins.float, builtins.bytes,
      builtins.NoneType, typing.Sequence[typing.Any], typing.Dict[builtins.str, typing.Any]]
trulens.dashboard.ux.components:
  __class__: builtins.module
  highs: {}
  lows:
    CLASS_INFO: builtins.str
    REDACTED_VALUE: builtins.str
    copy_to_clipboard: builtins.function
    dict_to_md: builtins.function
    draw_agent_info: builtins.function
    draw_call: builtins.function
    draw_calls: builtins.function
    draw_llm_info: builtins.function
    draw_metadata: builtins.function
    draw_prompt_info: builtins.function
    draw_selector_button: builtins.function
    draw_tool_info: builtins.function
    render_call_frame: builtins.function
    render_selector_markdown: builtins.function
    write_or_json: builtins.function
trulens.dashboard.ux.page_config:
  __class__: builtins.module
  __version__: 1.0.1a1
  highs: {}
  lows:
    __version__: builtins.str
    core_package: builtins.str
    core_version: builtins.str
    set_page_config: builtins.function
trulens.dashboard.ux.styles:
  __class__: builtins.module
  highs: {}
  lows:
    CATEGORY: builtins.type
    ResultCategoryType: enum.EnumType
    cellstyle_jscode: builtins.dict
    default_direction: builtins.str
    hide_table_row_index: builtins.str
    root_html: builtins.str
    root_js: builtins.str
    stmetricdelta_hidearrow: builtins.str
    valid_directions: builtins.list
trulens.dashboard.ux.styles.CATEGORY:
  __bases__:
  - builtins.object
  __class__: builtins.type
  attributes:
    ALL: builtins.list
    Category: pydantic._internal._model_construction.ModelMetaclass
    FAIL: collections.defaultdict
    FeedbackDirection: builtins.type
    PASS: collections.defaultdict
    UNKNOWN: trulens.dashboard.ux.styles.CATEGORY.Category
    WARNING: collections.defaultdict
    a: builtins.list
    adjective: builtins.str
    category_name: builtins.str
    direction: trulens.dashboard.ux.styles.CATEGORY.FeedbackDirection
    directions: builtins.list
    enum: builtins.int
    of_score: builtins.staticmethod
    styling: builtins.dict
    threshold: builtins.int
trulens.dashboard.ux.styles.ResultCategoryType:
  __bases__:
  - enum.Enum
  __class__: enum.EnumType
  attributes:
    FAIL: trulens.dashboard.ux.styles.ResultCategoryType
    PASS: trulens.dashboard.ux.styles.ResultCategoryType
    WARNING: trulens.dashboard.ux.styles.ResultCategoryType
    name: enum.property
    value: enum.property
trulens.feedback:
  __class__: builtins.module
  __version__: 1.0.1a1
  highs:
    Embeddings: pydantic._internal._model_construction.ModelMetaclass
    GroundTruthAggregator: pydantic._internal._model_construction.ModelMetaclass
    GroundTruthAgreement: pydantic._internal._model_construction.ModelMetaclass
    LLMProvider: pydantic._internal._model_construction.ModelMetaclass
  lows:
    __all__: builtins.list
    __path__: builtins.list
    __version__: builtins.str
trulens.feedback.dummy:
  __class__: builtins.module
  highs: {}
  lows:
    __path__: builtins.list
trulens.feedback.dummy.endpoint:
  __class__: builtins.module
  highs: {}
  lows:
    A: typing.TypeVar
    B: typing.TypeVar
    DEFAULT_NETWORK_TIMEOUT: builtins.float
    DEFAULT_RPM: builtins.int
    DummyAPI: pydantic._internal._model_construction.ModelMetaclass
    DummyAPICreator: builtins.type
    DummyEndpoint: pydantic._internal._model_construction.ModelMetaclass
    DummyEndpointCallback: pydantic._internal._model_construction.ModelMetaclass
    INSTRUMENT: builtins.str
    NonDeterminism: pydantic._internal._model_construction.ModelMetaclass
    T: typing.TypeVar
trulens.feedback.dummy.endpoint.DummyAPI:
  __bases__:
  - pydantic.main.BaseModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    aclassification: builtins.function
    acompletion: builtins.function
    alloc: builtins.int
    apost: builtins.function
    classification: builtins.function
    completion: builtins.function
    delay: builtins.float
    error_prob: builtins.float
    freeze_prob: builtins.float
    loading_prob: builtins.float
    loading_time_uniform_params: typing.Tuple[builtins.Annotated[builtins.float, annotated_types.Ge(ge=0)],
      builtins.Annotated[builtins.float, annotated_types.Ge(ge=0)]]
    ndt: trulens.feedback.dummy.endpoint.NonDeterminism
    overloaded_prob: builtins.float
    post: builtins.function
trulens.feedback.dummy.endpoint.DummyAPICreator:
  __bases__:
  - builtins.object
  __class__: builtins.type
  attributes:
    create_method: builtins.function
trulens.feedback.dummy.endpoint.DummyEndpoint:
  __bases__:
  - trulens.core.feedback.endpoint.Endpoint
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    api: trulens.feedback.dummy.endpoint.DummyAPI
    callback_class: typing.Type[trulens.core.feedback.endpoint.EndpointCallback]
    callback_name: builtins.str
    global_callback: trulens.core.feedback.endpoint.EndpointCallback
    name: builtins.str
    pace: trulens.core.utils.pace.Pace
    post_headers: typing.Dict[builtins.str, builtins.str]
    retries: builtins.int
    rpm: builtins.float
    tru_class_info: trulens.core.utils.pyschema.Class
trulens.feedback.dummy.endpoint.DummyEndpointCallback:
  __bases__:
  - trulens.core.feedback.endpoint.EndpointCallback
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    cost: trulens.core.schema.base.Cost
    endpoint: trulens.core.feedback.endpoint.Endpoint
trulens.feedback.dummy.endpoint.NonDeterminism:
  __bases__:
  - pydantic.main.BaseModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    discrete_choice: builtins.function
    np_random: typing.Any
    random: typing.Any
    seed: builtins.int
trulens.feedback.dummy.provider:
  __class__: builtins.module
  highs: {}
  lows:
    DummyProvider: pydantic._internal._model_construction.ModelMetaclass
trulens.feedback.dummy.provider.DummyProvider:
  __bases__:
  - trulens.feedback.llm_provider.LLMProvider
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    endpoint: typing.Optional[trulens.core.feedback.endpoint.Endpoint, builtins.NoneType]
    model_engine: builtins.str
    tru_class_info: trulens.core.utils.pyschema.Class
trulens.feedback.embeddings:
  __class__: builtins.module
  highs: {}
  lows:
    Embeddings: pydantic._internal._model_construction.ModelMetaclass
    TYPE_CHECKING: builtins.bool
trulens.feedback.embeddings.Embeddings:
  __bases__:
  - trulens.core.utils.pyschema.WithClassInfo
  - trulens.core.utils.serial.SerialModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    cosine_distance: builtins.function
    euclidean_distance: builtins.function
    manhattan_distance: builtins.function
    tru_class_info: trulens.core.utils.pyschema.Class
trulens.feedback.feedback:
  __class__: builtins.module
  highs: {}
  lows:
    rag_triad: builtins.function
trulens.feedback.generated:
  __class__: builtins.module
  highs: {}
  lows:
    ParseError: builtins.type
    re_0_10_rating: builtins.function
    re_configured_rating: builtins.function
trulens.feedback.generated.ParseError:
  __bases__:
  - builtins.Exception
  __class__: builtins.type
  attributes: {}
trulens.feedback.groundtruth:
  __class__: builtins.module
  highs: {}
  lows:
    GroundTruthAggregator: pydantic._internal._model_construction.ModelMetaclass
    GroundTruthAgreement: pydantic._internal._model_construction.ModelMetaclass
trulens.feedback.groundtruth.GroundTruthAggregator:
  __bases__:
  - trulens.core.utils.pyschema.WithClassInfo
  - trulens.core.utils.serial.SerialModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    auc: builtins.function
    brier_score: builtins.function
    custom_agg_funcs: typing.Dict[builtins.str, typing.Callable]
    ece: builtins.function
    ir_hit_rate: builtins.function
    k: typing.Optional[builtins.int, builtins.NoneType]
    kendall_tau: builtins.function
    mae: builtins.function
    mrr: builtins.function
    n_bins: builtins.int
    ndcg_at_k: builtins.function
    precision_at_k: builtins.function
    recall_at_k: builtins.function
    register_custom_agg_func: builtins.function
    spearman_correlation: builtins.function
    tru_class_info: trulens.core.utils.pyschema.Class
    true_labels: typing.List[builtins.int]
trulens.feedback.groundtruth.GroundTruthAgreement:
  __bases__:
  - trulens.core.utils.pyschema.WithClassInfo
  - trulens.core.utils.serial.SerialModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    absolute_error: builtins.function
    agreement_measure: builtins.function
    bert_score: builtins.function
    bert_scorer: builtins.object
    bleu: builtins.function
    ground_truth: typing.Union[typing.List[typing.Dict], typing.Callable, pandas.core.frame.DataFrame,
      trulens.core.utils.pyschema.FunctionOrMethod]
    ground_truth_imp: typing.Optional[typing.Callable, builtins.NoneType]
    provider: trulens.feedback.llm_provider.LLMProvider
    rouge: builtins.function
    tru_class_info: trulens.core.utils.pyschema.Class
trulens.feedback.llm_provider:
  __class__: builtins.module
  highs: {}
  lows:
    LLMProvider: pydantic._internal._model_construction.ModelMetaclass
trulens.feedback.llm_provider.LLMProvider:
  __bases__:
  - trulens.core.feedback.provider.Provider
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    coherence: builtins.function
    coherence_with_cot_reasons: builtins.function
    comprehensiveness_with_cot_reasons: builtins.function
    conciseness: builtins.function
    conciseness_with_cot_reasons: builtins.function
    context_relevance: builtins.function
    context_relevance_verb_confidence: builtins.function
    context_relevance_with_cot_reasons: builtins.function
    controversiality: builtins.function
    controversiality_with_cot_reasons: builtins.function
    correctness: builtins.function
    correctness_with_cot_reasons: builtins.function
    criminality: builtins.function
    criminality_with_cot_reasons: builtins.function
    endpoint: typing.Optional[trulens.core.feedback.endpoint.Endpoint, builtins.NoneType]
    generate_confidence_score: builtins.function
    generate_score: builtins.function
    generate_score_and_reasons: builtins.function
    groundedness_measure_with_cot_reasons: builtins.function
    groundedness_measure_with_cot_reasons_consider_answerability: builtins.function
    harmfulness: builtins.function
    harmfulness_with_cot_reasons: builtins.function
    helpfulness: builtins.function
    helpfulness_with_cot_reasons: builtins.function
    insensitivity: builtins.function
    insensitivity_with_cot_reasons: builtins.function
    maliciousness: builtins.function
    maliciousness_with_cot_reasons: builtins.function
    misogyny: builtins.function
    misogyny_with_cot_reasons: builtins.function
    model_agreement: builtins.function
    model_engine: builtins.str
    relevance: builtins.function
    relevance_with_cot_reasons: builtins.function
    sentiment: builtins.function
    sentiment_with_cot_reasons: builtins.function
    stereotypes: builtins.function
    stereotypes_with_cot_reasons: builtins.function
    summarization_with_cot_reasons: builtins.function
    tru_class_info: trulens.core.utils.pyschema.Class
trulens.feedback.prompts:
  __class__: builtins.module
  highs: {}
  lows:
    AGREEMENT_SYSTEM: builtins.str
    ANSWER_RELEVANCE_SYSTEM: builtins.str
    ANSWER_RELEVANCE_USER: builtins.str
    COMPOREHENSIVENESS_USER_PROMPT: builtins.str
    COMPREHENSIVENESS_SYSTEM_PROMPT: builtins.str
    CONTEXT_RELEVANCE_SYSTEM: builtins.str
    CONTEXT_RELEVANCE_USER: builtins.str
    CORRECT_SYSTEM: builtins.str
    COT_REASONS_TEMPLATE: builtins.str
    GENERATE_KEY_POINTS_SYSTEM_PROMPT: builtins.str
    GENERATE_KEY_POINTS_USER_PROMPT: builtins.str
    GROUNDEDNESS_REASON_TEMPLATE: builtins.str
    LANGCHAIN_COHERENCE_SYSTEM_PROMPT: builtins.str
    LANGCHAIN_CONCISENESS_SYSTEM_PROMPT: builtins.str
    LANGCHAIN_CONTROVERSIALITY_SYSTEM_PROMPT: builtins.str
    LANGCHAIN_CORRECTNESS_SYSTEM_PROMPT: builtins.str
    LANGCHAIN_CRIMINALITY_SYSTEM_PROMPT: builtins.str
    LANGCHAIN_HARMFULNESS_SYSTEM_PROMPT: builtins.str
    LANGCHAIN_HELPFULNESS_SYSTEM_PROMPT: builtins.str
    LANGCHAIN_INSENSITIVITY_SYSTEM_PROMPT: builtins.str
    LANGCHAIN_MALICIOUSNESS_SYSTEM_PROMPT: builtins.str
    LANGCHAIN_MISOGYNY_SYSTEM_PROMPT: builtins.str
    LANGCHAIN_PROMPT_TEMPLATE_SYSTEM: builtins.str
    LANGCHAIN_PROMPT_TEMPLATE_USER: builtins.str
    LANGCHAIN_PROMPT_TEMPLATE_WITH_COT_REASONS_SYSTEM: builtins.str
    LLM_ABSTENTION_SYSTEM: builtins.str
    LLM_ABSTENTION_USER: builtins.str
    LLM_ANSWERABILITY_SYSTEM: builtins.str
    LLM_ANSWERABILITY_USER: builtins.str
    LLM_GROUNDEDNESS_FULL_PROMPT: builtins.str
    LLM_GROUNDEDNESS_SYSTEM: builtins.str
    LLM_GROUNDEDNESS_USER: builtins.str
    LLM_TRIVIAL_SYSTEM: builtins.str
    LLM_TRIVIAL_USER: builtins.str
    REMOVE_Y_N: builtins.str
    SENTIMENT_SYSTEM: builtins.str
    SENTIMENT_USER: builtins.str
    STEREOTYPES_SYSTEM_PROMPT: builtins.str
    STEREOTYPES_USER_PROMPT: builtins.str
    SYSTEM_FIND_SUPPORTING: builtins.str
    USER_FIND_SUPPORTING: builtins.str
trulens.feedback.v2:
  __class__: builtins.module
  highs: {}
  lows:
    __path__: builtins.list
trulens.feedback.v2.feedback:
  __class__: builtins.module
  highs: {}
  lows:
    Abstention: pydantic._internal._model_construction.ModelMetaclass
    Answerability: pydantic._internal._model_construction.ModelMetaclass
    BINARY_0_1_PROMPT: builtins.str
    BinaryOutputType: pydantic._internal._model_construction.ModelMetaclass
    BinarySentimentModel: pydantic._internal._model_construction.ModelMetaclass
    COTExplained: pydantic._internal._model_construction.ModelMetaclass
    ClassificationModel: pydantic._internal._model_construction.ModelMetaclass
    Coherence: pydantic._internal._model_construction.ModelMetaclass
    CompletionModel: pydantic._internal._model_construction.ModelMetaclass
    Conciseness: pydantic._internal._model_construction.ModelMetaclass
    ContextRelevance: pydantic._internal._model_construction.ModelMetaclass
    Controversiality: pydantic._internal._model_construction.ModelMetaclass
    Correctness: pydantic._internal._model_construction.ModelMetaclass
    Criminality: pydantic._internal._model_construction.ModelMetaclass
    Criteria: enum.EnumType
    DigitalOutputType: pydantic._internal._model_construction.ModelMetaclass
    EvalSchema: pydantic._internal._model_construction.ModelMetaclass
    Explained: pydantic._internal._model_construction.ModelMetaclass
    Feedback: pydantic._internal._model_construction.ModelMetaclass
    FeedbackOutput: pydantic._internal._model_construction.ModelMetaclass
    FeedbackOutputType: pydantic._internal._model_construction.ModelMetaclass
    GraphicViolence: pydantic._internal._model_construction.ModelMetaclass
    GroundTruth: pydantic._internal._model_construction.ModelMetaclass
    Groundedness: pydantic._internal._model_construction.ModelMetaclass
    Harmfulness: pydantic._internal._model_construction.ModelMetaclass
    Hate: pydantic._internal._model_construction.ModelMetaclass
    HateThreatening: pydantic._internal._model_construction.ModelMetaclass
    Helpfulness: pydantic._internal._model_construction.ModelMetaclass
    Insensitivity: pydantic._internal._model_construction.ModelMetaclass
    LIKERT_0_10_PROMPT: builtins.str
    LIKERT_0_3_PROMPT: builtins.str
    LanguageMatch: pydantic._internal._model_construction.ModelMetaclass
    Legality: pydantic._internal._model_construction.ModelMetaclass
    Maliciousness: pydantic._internal._model_construction.ModelMetaclass
    Misogyny: pydantic._internal._model_construction.ModelMetaclass
    Model: pydantic._internal._model_construction.ModelMetaclass
    Moderation: pydantic._internal._model_construction.ModelMetaclass
    NaturalLanguage: pydantic._internal._model_construction.ModelMetaclass
    OutputSpace: enum.EnumType
    OutputWithCOTExplanation: pydantic._internal._model_construction.ModelMetaclass
    OutputWithExplanation: pydantic._internal._model_construction.ModelMetaclass
    PromptResponseRelevance: pydantic._internal._model_construction.ModelMetaclass
    Relevance: pydantic._internal._model_construction.ModelMetaclass
    SelfHarm: pydantic._internal._model_construction.ModelMetaclass
    Semantics: pydantic._internal._model_construction.ModelMetaclass
    Sentiment: pydantic._internal._model_construction.ModelMetaclass
    Sexual: pydantic._internal._model_construction.ModelMetaclass
    SexualMinors: pydantic._internal._model_construction.ModelMetaclass
    Stereotypes: pydantic._internal._model_construction.ModelMetaclass
    Syntax: pydantic._internal._model_construction.ModelMetaclass
    Toxicity: pydantic._internal._model_construction.ModelMetaclass
    Trivial: pydantic._internal._model_construction.ModelMetaclass
    Violence: pydantic._internal._model_construction.ModelMetaclass
    WithPrompt: pydantic._internal._model_construction.ModelMetaclass
    supported_criteria: builtins.dict
trulens.feedback.v2.feedback.Abstention:
  __bases__:
  - trulens.feedback.v2.feedback.Semantics
  - trulens.feedback.v2.feedback.WithPrompt
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    languages: typing.Optional[typing.List[builtins.str], builtins.NoneType]
    system_prompt: builtins.str
    user_prompt: builtins.str
trulens.feedback.v2.feedback.Answerability:
  __bases__:
  - trulens.feedback.v2.feedback.Semantics
  - trulens.feedback.v2.feedback.WithPrompt
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    languages: typing.Optional[typing.List[builtins.str], builtins.NoneType]
    system_prompt: builtins.str
    user_prompt: builtins.str
trulens.feedback.v2.feedback.BinaryOutputType:
  __bases__:
  - trulens.feedback.v2.feedback.FeedbackOutputType
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    max_feedback: builtins.float
    max_interpretation: typing.Optional[builtins.str, builtins.NoneType]
    min_feedback: builtins.float
    min_interpretation: typing.Optional[builtins.str, builtins.NoneType]
trulens.feedback.v2.feedback.BinarySentimentModel:
  __bases__:
  - trulens.feedback.v2.feedback.ClassificationModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    feedback: trulens.feedback.v2.feedback.Feedback
    id: builtins.str
    output_type: trulens.feedback.v2.feedback.FeedbackOutputType
trulens.feedback.v2.feedback.COTExplained:
  __bases__:
  - trulens.feedback.v2.feedback.Feedback
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    COT_REASONS_TEMPLATE: builtins.str
    extract_cot_explanation_of_response: builtins.function
    of_feedback: builtins.classmethod
trulens.feedback.v2.feedback.ClassificationModel:
  __bases__:
  - trulens.feedback.v2.feedback.Model
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    feedback: trulens.feedback.v2.feedback.Feedback
    id: builtins.str
    of_prompt: builtins.staticmethod
trulens.feedback.v2.feedback.Coherence:
  __bases__:
  - trulens.feedback.v2.feedback.Semantics
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    languages: typing.Optional[typing.List[builtins.str], builtins.NoneType]
    system_prompt: builtins.str
trulens.feedback.v2.feedback.CompletionModel:
  __bases__:
  - trulens.feedback.v2.feedback.Model
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    feedback: trulens.feedback.v2.feedback.Feedback
    id: builtins.str
    max_output_tokens: builtins.int
    max_prompt_tokens: builtins.int
    of_langchain_llm: builtins.staticmethod
trulens.feedback.v2.feedback.Conciseness:
  __bases__:
  - trulens.feedback.v2.feedback.Semantics
  - trulens.feedback.v2.feedback.WithPrompt
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    languages: typing.Optional[typing.List[builtins.str], builtins.NoneType]
    system_prompt: builtins.str
trulens.feedback.v2.feedback.ContextRelevance:
  __bases__:
  - trulens.feedback.v2.feedback.Relevance
  - trulens.feedback.v2.feedback.WithPrompt
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    criteria: builtins.str
    languages: typing.Optional[typing.List[builtins.str], builtins.NoneType]
    output_space: builtins.str
    output_space_prompt: builtins.str
    override_critera_and_output_space: builtins.classmethod
    system_prompt: builtins.str
    system_prompt_template: builtins.str
    user_prompt: builtins.str
    validate_criteria_and_output_space: builtins.staticmethod
    verb_confidence_prompt: builtins.str
trulens.feedback.v2.feedback.Controversiality:
  __bases__:
  - trulens.feedback.v2.feedback.Semantics
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    languages: typing.Optional[typing.List[builtins.str], builtins.NoneType]
    system_prompt: builtins.str
trulens.feedback.v2.feedback.Correctness:
  __bases__:
  - trulens.feedback.v2.feedback.Semantics
  - trulens.feedback.v2.feedback.WithPrompt
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    languages: typing.Optional[typing.List[builtins.str], builtins.NoneType]
    system_prompt: builtins.str
trulens.feedback.v2.feedback.Criminality:
  __bases__:
  - trulens.feedback.v2.feedback.Legality
  - trulens.feedback.v2.feedback.WithPrompt
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    languages: typing.Optional[typing.List[builtins.str], builtins.NoneType]
    system_prompt: builtins.str
trulens.feedback.v2.feedback.Criteria:
  __bases__:
  - builtins.str
  - enum.Enum
  __class__: enum.EnumType
  attributes:
    COHERENCE: trulens.feedback.v2.feedback.Criteria
    CONCISENESS: trulens.feedback.v2.feedback.Criteria
    CONTROVERSIALITY: trulens.feedback.v2.feedback.Criteria
    CORRECTNESS: trulens.feedback.v2.feedback.Criteria
    CREATIVITY: trulens.feedback.v2.feedback.Criteria
    CRIMINALITY: trulens.feedback.v2.feedback.Criteria
    DEPTH: trulens.feedback.v2.feedback.Criteria
    DETAIL: trulens.feedback.v2.feedback.Criteria
    HARMFULNESS: trulens.feedback.v2.feedback.Criteria
    HELPFULNESS: trulens.feedback.v2.feedback.Criteria
    INSENSITIVITY: trulens.feedback.v2.feedback.Criteria
    MALICIOUSNESS: trulens.feedback.v2.feedback.Criteria
    MISOGYNY: trulens.feedback.v2.feedback.Criteria
    RELEVANCE: trulens.feedback.v2.feedback.Criteria
    name: enum.property
    value: enum.property
trulens.feedback.v2.feedback.DigitalOutputType:
  __bases__:
  - trulens.feedback.v2.feedback.FeedbackOutputType
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    max_feedback: builtins.float
    max_interpretation: typing.Optional[builtins.str, builtins.NoneType]
    min_feedback: builtins.float
    min_interpretation: typing.Optional[builtins.str, builtins.NoneType]
trulens.feedback.v2.feedback.EvalSchema:
  __bases__:
  - pydantic.main.BaseModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    criteria: builtins.str
    get_output_scale_prompt: builtins.function
    output_space: builtins.str
    validate_output_space: builtins.classmethod
trulens.feedback.v2.feedback.Explained:
  __bases__:
  - trulens.feedback.v2.feedback.Feedback
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    of_feedback: builtins.staticmethod
trulens.feedback.v2.feedback.Feedback:
  __bases__:
  - pydantic.main.BaseModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    help: builtins.classmethod
    str_help: builtins.classmethod
trulens.feedback.v2.feedback.FeedbackOutput:
  __bases__:
  - pydantic.main.BaseModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    feedback: builtins.float
    typ: trulens.feedback.v2.feedback.FeedbackOutputType
trulens.feedback.v2.feedback.FeedbackOutputType:
  __bases__:
  - pydantic.main.BaseModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    max_feedback: builtins.float
    max_interpretation: typing.Optional[builtins.str, builtins.NoneType]
    min_feedback: builtins.float
    min_interpretation: typing.Optional[builtins.str, builtins.NoneType]
trulens.feedback.v2.feedback.GraphicViolence:
  __bases__:
  - trulens.feedback.v2.feedback.Violence
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    languages: typing.Optional[typing.List[builtins.str], builtins.NoneType]
trulens.feedback.v2.feedback.GroundTruth:
  __bases__:
  - trulens.feedback.v2.feedback.Semantics
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    languages: typing.Optional[typing.List[builtins.str], builtins.NoneType]
trulens.feedback.v2.feedback.Groundedness:
  __bases__:
  - trulens.feedback.v2.feedback.Semantics
  - trulens.feedback.v2.feedback.WithPrompt
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    languages: typing.Optional[typing.List[builtins.str], builtins.NoneType]
    system_prompt: builtins.str
    user_prompt: builtins.str
trulens.feedback.v2.feedback.Harmfulness:
  __bases__:
  - trulens.feedback.v2.feedback.Moderation
  - trulens.feedback.v2.feedback.WithPrompt
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    languages: typing.Optional[typing.List[builtins.str], builtins.NoneType]
    system_prompt: builtins.str
trulens.feedback.v2.feedback.Hate:
  __bases__:
  - trulens.feedback.v2.feedback.Moderation
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    languages: typing.Optional[typing.List[builtins.str], builtins.NoneType]
trulens.feedback.v2.feedback.HateThreatening:
  __bases__:
  - trulens.feedback.v2.feedback.Hate
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    languages: typing.Optional[typing.List[builtins.str], builtins.NoneType]
trulens.feedback.v2.feedback.Helpfulness:
  __bases__:
  - trulens.feedback.v2.feedback.Semantics
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    languages: typing.Optional[typing.List[builtins.str], builtins.NoneType]
    system_prompt: builtins.str
trulens.feedback.v2.feedback.Insensitivity:
  __bases__:
  - trulens.feedback.v2.feedback.Semantics
  - trulens.feedback.v2.feedback.WithPrompt
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    languages: typing.Optional[typing.List[builtins.str], builtins.NoneType]
    system_prompt: builtins.str
trulens.feedback.v2.feedback.LanguageMatch:
  __bases__:
  - trulens.feedback.v2.feedback.Syntax
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    languages: typing.Optional[typing.List[builtins.str], builtins.NoneType]
trulens.feedback.v2.feedback.Legality:
  __bases__:
  - trulens.feedback.v2.feedback.Semantics
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    languages: typing.Optional[typing.List[builtins.str], builtins.NoneType]
trulens.feedback.v2.feedback.Maliciousness:
  __bases__:
  - trulens.feedback.v2.feedback.Moderation
  - trulens.feedback.v2.feedback.WithPrompt
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    languages: typing.Optional[typing.List[builtins.str], builtins.NoneType]
    system_prompt: builtins.str
    user_prompt: builtins.str
trulens.feedback.v2.feedback.Misogyny:
  __bases__:
  - trulens.feedback.v2.feedback.Hate
  - trulens.feedback.v2.feedback.WithPrompt
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    languages: typing.Optional[typing.List[builtins.str], builtins.NoneType]
    system_prompt: builtins.str
trulens.feedback.v2.feedback.Model:
  __bases__:
  - pydantic.main.BaseModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    feedback: trulens.feedback.v2.feedback.Feedback
    id: builtins.str
trulens.feedback.v2.feedback.Moderation:
  __bases__:
  - trulens.feedback.v2.feedback.Semantics
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    languages: typing.Optional[typing.List[builtins.str], builtins.NoneType]
trulens.feedback.v2.feedback.NaturalLanguage:
  __bases__:
  - trulens.feedback.v2.feedback.Feedback
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    languages: typing.Optional[typing.List[builtins.str], builtins.NoneType]
trulens.feedback.v2.feedback.OutputSpace:
  __bases__:
  - enum.Enum
  __class__: enum.EnumType
  attributes:
    BINARY: trulens.feedback.v2.feedback.OutputSpace
    LIKERT_0_10: trulens.feedback.v2.feedback.OutputSpace
    LIKERT_0_3: trulens.feedback.v2.feedback.OutputSpace
    name: enum.property
    value: enum.property
trulens.feedback.v2.feedback.OutputWithCOTExplanation:
  __bases__:
  - pydantic.main.BaseModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    reason: builtins.str
    reason_score: builtins.float
trulens.feedback.v2.feedback.OutputWithExplanation:
  __bases__:
  - trulens.feedback.v2.feedback.FeedbackOutput
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    feedback: builtins.float
    reason: builtins.str
    typ: trulens.feedback.v2.feedback.FeedbackOutputType
trulens.feedback.v2.feedback.PromptResponseRelevance:
  __bases__:
  - trulens.feedback.v2.feedback.Relevance
  - trulens.feedback.v2.feedback.WithPrompt
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    languages: typing.Optional[typing.List[builtins.str], builtins.NoneType]
    system_prompt: builtins.str
    user_prompt: builtins.str
trulens.feedback.v2.feedback.Relevance:
  __bases__:
  - trulens.feedback.v2.feedback.Semantics
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    languages: typing.Optional[typing.List[builtins.str], builtins.NoneType]
trulens.feedback.v2.feedback.SelfHarm:
  __bases__:
  - trulens.feedback.v2.feedback.Moderation
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    languages: typing.Optional[typing.List[builtins.str], builtins.NoneType]
trulens.feedback.v2.feedback.Semantics:
  __bases__:
  - trulens.feedback.v2.feedback.NaturalLanguage
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    languages: typing.Optional[typing.List[builtins.str], builtins.NoneType]
trulens.feedback.v2.feedback.Sentiment:
  __bases__:
  - trulens.feedback.v2.feedback.Semantics
  - trulens.feedback.v2.feedback.WithPrompt
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    languages: typing.Optional[typing.List[builtins.str], builtins.NoneType]
    system_prompt: builtins.str
    user_prompt: builtins.str
trulens.feedback.v2.feedback.Sexual:
  __bases__:
  - trulens.feedback.v2.feedback.Moderation
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    languages: typing.Optional[typing.List[builtins.str], builtins.NoneType]
trulens.feedback.v2.feedback.SexualMinors:
  __bases__:
  - trulens.feedback.v2.feedback.Sexual
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    languages: typing.Optional[typing.List[builtins.str], builtins.NoneType]
trulens.feedback.v2.feedback.Stereotypes:
  __bases__:
  - trulens.feedback.v2.feedback.Moderation
  - trulens.feedback.v2.feedback.WithPrompt
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    languages: typing.Optional[typing.List[builtins.str], builtins.NoneType]
    system_prompt: builtins.str
    user_prompt: builtins.str
trulens.feedback.v2.feedback.Syntax:
  __bases__:
  - trulens.feedback.v2.feedback.NaturalLanguage
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    languages: typing.Optional[typing.List[builtins.str], builtins.NoneType]
trulens.feedback.v2.feedback.Toxicity:
  __bases__:
  - trulens.feedback.v2.feedback.Semantics
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    languages: typing.Optional[typing.List[builtins.str], builtins.NoneType]
trulens.feedback.v2.feedback.Trivial:
  __bases__:
  - trulens.feedback.v2.feedback.Semantics
  - trulens.feedback.v2.feedback.WithPrompt
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    languages: typing.Optional[typing.List[builtins.str], builtins.NoneType]
    system_prompt: builtins.str
    user_prompt: builtins.str
trulens.feedback.v2.feedback.Violence:
  __bases__:
  - trulens.feedback.v2.feedback.Moderation
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    languages: typing.Optional[typing.List[builtins.str], builtins.NoneType]
trulens.feedback.v2.feedback.WithPrompt:
  __bases__:
  - pydantic.main.BaseModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes: {}
trulens.feedback.v2.provider:
  __class__: builtins.module
  highs: {}
  lows:
    __path__: builtins.list
trulens.feedback.v2.provider.base:
  __class__: builtins.module
  highs: {}
  lows:
    OpenAIProvider: pydantic._internal._model_construction.ModelMetaclass
    Provider: pydantic._internal._model_construction.ModelMetaclass
trulens.feedback.v2.provider.base.OpenAIProvider:
  __bases__:
  - trulens.feedback.v2.provider.base.Provider
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    default_completion_model: builtins.str
    endpoint: typing.Optional[trulens.core.feedback.endpoint.Endpoint, builtins.NoneType]
    tru_class_info: trulens.core.utils.pyschema.Class
trulens.feedback.v2.provider.base.Provider:
  __bases__:
  - trulens.core.utils.pyschema.WithClassInfo
  - trulens.core.utils.serial.SerialModel
  __class__: pydantic._internal._model_construction.ModelMetaclass
  attributes:
    classify: builtins.function
    complete: builtins.function
    endpoint: typing.Optional[trulens.core.feedback.endpoint.Endpoint, builtins.NoneType]
    supported_models: builtins.function
    tru_class_info: trulens.core.utils.pyschema.Class
