def vault_settings = [
    vaultSecrets: [
        [
            path: 'ml-platform/snowml/e2etests-trulens-jenkins-credentials',
            secretValues: [
                [envVar: 'OPENAI_API_KEY', vaultKey: 'OPENAI_API_KEY'],
                [envVar: 'HUGGINGFACEHUB_API_TOKEN', vaultKey: 'HUGGINGFACEHUB_API_TOKEN'],
                [envVar: 'HUGGINGFACE_API_KEY', vaultKey: 'HUGGINGFACE_API_KEY'],
                [envVar: 'PINECONE_API_KEY', vaultKey: 'PINECONE_API_KEY'],
                [envVar: 'PINECONE_ENV', vaultKey: 'PINECONE_ENV'],
                [envVar: 'SNOWFLAKE_ACCOUNT', vaultKey: 'SNOWFLAKE_ACCOUNT'],
                [envVar: 'SNOWFLAKE_DATABASE', vaultKey: 'SNOWFLAKE_DATABASE'],
                [envVar: 'SNOWFLAKE_ROLE', vaultKey: 'SNOWFLAKE_ROLE'],
                [envVar: 'SNOWFLAKE_SCHEMA', vaultKey: 'SNOWFLAKE_SCHEMA'],
                [envVar: 'SNOWFLAKE_USER', vaultKey: 'SNOWFLAKE_USER'],
                [envVar: 'SNOWFLAKE_USER_PASSWORD', vaultKey: 'SNOWFLAKE_USER_PASSWORD'],
                [envVar: 'SNOWFLAKE_WAREHOUSE', vaultKey: 'SNOWFLAKE_WAREHOUSE']
            ]
        ]
    ]
]

pipeline {
    agent {
        docker {
            label 'regular-memory-node-c7'
            image 'python:3.11'
            reuseNode true
            alwaysPull false
            args '-u root'
        }
    }

    environment {
        // NOTE: Increase timeout for HTTP requests to avoid issues with slow downloads
        // See: https://github.com/python-poetry/poetry/blob/master/src/poetry/utils/constants.py
        POETRY_REQUESTS_TIMEOUT=120
        // POETRY_REQUESTS_MAX_RETRIES=3
    }

    options {
        timestamps()
        ansiColor('xterm')
    }

    stages {
        stage('prepare') {
            steps {
                sh label: 'Environment setup', script: '''
                    set -e
                    git config --global --add safe.directory '*'  # perm fix
                    curl -sSL https://install.python-poetry.org | python3 -
                    ln -s /root/.local/bin/poetry /usr/local/bin/poetry
                    echo "Using $(python --version) ($(which python)) $(poetry -V)"

                    # ALERT: temp disable to test overall env
                    # NOTE: Increase timeout for HTTP requests to avoid issues with slow downloads
                    # See: https://github.com/python-poetry/poetry/blob/master/src/poetry/utils/constants.py
                    # export POETRY_REQUESTS_TIMEOUT=120
                    # export POETRY_REQUESTS_MAX_RETRIES=3

                    echo "env PREPARE:"
                    printenv

                    poetry config requests.max-retries 3
                    poetry config virtualenvs.create false

                    # NOTE: temp print poetry config to confirm
                    echo "Poetry config PREPARE:"
                    poetry config --list

                    poetry run pip install pip==24.1.2
                    poetry run python --version
                    poetry run pip --version
                '''
                sh label: 'Run pre-commit hooks', script: '''
                    set -e
                    poetry install --only dev --sync
                    make run-precommit
                '''
                sh label: 'Build all packages with zip wheels', script: '''
                    set -e
                    apt-get update
                    apt-get install -y zip
                    apt-get install -y unzip
                    make build-with-zip-wheels
                '''
            }
        }
        stage('Test Suites') {
            parallel {
                stage('e2e') {
                    steps {
                        withVault(vault_settings) {
                            sh label: 'Run Optional "e2e" Test Suite', script: '''
                                set -e

                                echo "env E2E:"
                                printenv

                                # NOTE: temp print poetry config to confirm
                                echo "Poetry config E2E:"
                                poetry config --list

                                make test-e2e-optional
                            '''
                        }
                    }
                }
                stage('notebook') {
                    steps {
                        withVault(vault_settings) {
                            sh label: 'Run Optional "test" Test Suite', script: '''
                                set -e

                                echo "env NOTEBOOK:"
                                printenv

                                # NOTE: temp print poetry config to confirm
                                echo "Poetry config NOTEBOOK:"
                                poetry config --list

                                make test-notebook-optional
                            '''
                        }
                    }
                }
            }
        }
    }
}
